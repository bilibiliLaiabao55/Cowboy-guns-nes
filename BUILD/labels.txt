ca65 V2.19 - Git 216bb22
Main file   : build/CowboyGuns.s
Current file: build/CowboyGuns.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 216bb22
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_rand
000000r 1               	.import		_pal_all
000000r 1               	.import		_pal_col
000000r 1               	.import		_ppu_wait_nmi
000000r 1               	.import		_ppu_off
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_ppu_mask
000000r 1               	.import		_oam_clear
000000r 1               	.import		_oam_spr
000000r 1               	.import		_oam_meta_spr
000000r 1               	.import		_oam_set
000000r 1               	.import		_split
000000r 1               	.import		_bank_bg
000000r 1               	.import		_vram_adr
000000r 1               	.import		_vram_unrle
000000r 1               	.import		_set_vram_buffer
000000r 1               	.import		_one_vram_buffer
000000r 1               	.import		_set_scroll_x
000000r 1               	.import		_set_scroll_y
000000r 1               	.import		_famistudio_music_play
000000r 1               	.import		_famistudio_sfx_play
000000r 1               	.import		_zap_shoot
000000r 1               	.import		_zap_read
000000r 1               	.export		_sands
000000r 1               	.export		_title
000000r 1               	.export		_boxes_0_data
000000r 1               	.export		_boxes_1_data
000000r 1               	.export		_boxes_list
000000r 1               	.export		_enemy_0_data
000000r 1               	.export		_enemy_1_data
000000r 1               	.export		_enemy_list
000000r 1               	.export		_pad2_zapper
000000r 1               	.export		_zapper_ready
000000r 1               	.export		_hit_detected
000000r 1               	.export		_temp1
000000r 1               	.export		_temp2
000000r 1               	.export		_state
000000r 1               	.export		_scroll_x
000000r 1               	.export		_enemy_x
000000r 1               	.export		_enemy_y
000000r 1               	.export		_enemy_type
000000r 1               	.export		_enemy_frame
000000r 1               	.export		_health
000000r 1               	.export		_enemy_up_speed
000000r 1               	.export		_timer
000000r 1               	.export		_timer0
000000r 1               	.export		_shoot
000000r 1               	.export		_floating_down
000000r 1               	.export		_score0
000000r 1               	.export		_score1
000000r 1               	.export		_pal
000000r 1               	.export		_draw_title_box
000000r 1               	.export		_draw_enemy_box
000000r 1               	.export		_draw_enemy
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _health:
000000r 1  0A           	.byte	$0A
000001r 1               _enemy_up_speed:
000001r 1  0A           	.byte	$0A
000002r 1               _timer:
000002r 1  00           	.byte	$00
000003r 1               _timer0:
000003r 1  00           	.byte	$00
000004r 1               _shoot:
000004r 1  05           	.byte	$05
000005r 1               _floating_down:
000005r 1  00           	.byte	$00
000006r 1               _score0:
000006r 1  00           	.byte	$00
000007r 1               _score1:
000007r 1  00           	.byte	$00
000008r 1               
000008r 1               .segment	"RODATA"
000000r 1               
000000r 1               _sands:
000000r 1  01           	.byte	$01
000001r 1  00           	.byte	$00
000002r 1  00           	.byte	$00
000003r 1  38           	.byte	$38
000004r 1  03           	.byte	$03
000005r 1  01           	.byte	$01
000006r 1  02           	.byte	$02
000007r 1  39           	.byte	$39
000008r 1  00           	.byte	$00
000009r 1  01           	.byte	$01
00000Ar 1  0F           	.byte	$0F
00000Br 1  38           	.byte	$38
00000Cr 1  03           	.byte	$03
00000Dr 1  39           	.byte	$39
00000Er 1  00           	.byte	$00
00000Fr 1  01           	.byte	$01
000010r 1  06           	.byte	$06
000011r 1  38           	.byte	$38
000012r 1  03           	.byte	$03
000013r 1  01           	.byte	$01
000014r 1  04           	.byte	$04
000015r 1  3D           	.byte	$3D
000016r 1  00           	.byte	$00
000017r 1  01           	.byte	$01
000018r 1  03           	.byte	$03
000019r 1  38           	.byte	$38
00001Ar 1  03           	.byte	$03
00001Br 1  03           	.byte	$03
00001Cr 1  3D           	.byte	$3D
00001Dr 1  00           	.byte	$00
00001Er 1  01           	.byte	$01
00001Fr 1  05           	.byte	$05
000020r 1  3C           	.byte	$3C
000021r 1  03           	.byte	$03
000022r 1  01           	.byte	$01
000023r 1  02           	.byte	$02
000024r 1  3D           	.byte	$3D
000025r 1  00           	.byte	$00
000026r 1  01           	.byte	$01
000027r 1  05           	.byte	$05
000028r 1  3A           	.byte	$3A
000029r 1  03           	.byte	$03
00002Ar 1  01           	.byte	$01
00002Br 1  03           	.byte	$03
00002Cr 1  3B           	.byte	$3B
00002Dr 1  00           	.byte	$00
00002Er 1  01           	.byte	$01
00002Fr 1  04           	.byte	$04
000030r 1  3A           	.byte	$3A
000031r 1  03           	.byte	$03
000032r 1  3B           	.byte	$3B
000033r 1  00           	.byte	$00
000034r 1  01           	.byte	$01
000035r 1  07           	.byte	$07
000036r 1  3A           	.byte	$3A
000037r 1  03           	.byte	$03
000038r 1  3B           	.byte	$3B
000039r 1  00           	.byte	$00
00003Ar 1  01           	.byte	$01
00003Br 1  07           	.byte	$07
00003Cr 1  3A           	.byte	$3A
00003Dr 1  03           	.byte	$03
00003Er 1  03           	.byte	$03
00003Fr 1  3B           	.byte	$3B
000040r 1  00           	.byte	$00
000041r 1  01           	.byte	$01
000042r 1  15           	.byte	$15
000043r 1  3C           	.byte	$3C
000044r 1  03           	.byte	$03
000045r 1  3D           	.byte	$3D
000046r 1  00           	.byte	$00
000047r 1  01           	.byte	$01
000048r 1  FE           	.byte	$FE
000049r 1  00           	.byte	$00
00004Ar 1  01           	.byte	$01
00004Br 1  FE           	.byte	$FE
00004Cr 1  00           	.byte	$00
00004Dr 1  01           	.byte	$01
00004Er 1  41           	.byte	$41
00004Fr 1  FF           	.byte	$FF
000050r 1  00           	.byte	$00
000051r 1  01           	.byte	$01
000052r 1  7F           	.byte	$7F
000053r 1  29           	.byte	$29
000054r 1  2A           	.byte	$2A
000055r 1  2B           	.byte	$2B
000056r 1  2C           	.byte	$2C
000057r 1  29           	.byte	$29
000058r 1  2A           	.byte	$2A
000059r 1  2B           	.byte	$2B
00005Ar 1  2C           	.byte	$2C
00005Br 1  29           	.byte	$29
00005Cr 1  2A           	.byte	$2A
00005Dr 1  2B           	.byte	$2B
00005Er 1  2C           	.byte	$2C
00005Fr 1  29           	.byte	$29
000060r 1  2A           	.byte	$2A
000061r 1  2B           	.byte	$2B
000062r 1  2C           	.byte	$2C
000063r 1  29           	.byte	$29
000064r 1  2A           	.byte	$2A
000065r 1  2B           	.byte	$2B
000066r 1  2C           	.byte	$2C
000067r 1  29           	.byte	$29
000068r 1  2A           	.byte	$2A
000069r 1  2B           	.byte	$2B
00006Ar 1  2C           	.byte	$2C
00006Br 1  29           	.byte	$29
00006Cr 1  2A           	.byte	$2A
00006Dr 1  2B           	.byte	$2B
00006Er 1  2C           	.byte	$2C
00006Fr 1  29           	.byte	$29
000070r 1  2A           	.byte	$2A
000071r 1  2B           	.byte	$2B
000072r 1  2C           	.byte	$2C
000073r 1  2D           	.byte	$2D
000074r 1  01           	.byte	$01
000075r 1  5F           	.byte	$5F
000076r 1  AA           	.byte	$AA
000077r 1  AA           	.byte	$AA
000078r 1  00           	.byte	$00
000079r 1  AA           	.byte	$AA
00007Ar 1  00           	.byte	$00
00007Br 1  88           	.byte	$88
00007Cr 1  2A           	.byte	$2A
00007Dr 1  A0           	.byte	$A0
00007Er 1  00           	.byte	$00
00007Fr 1  01           	.byte	$01
000080r 1  27           	.byte	$27
000081r 1  50           	.byte	$50
000082r 1  01           	.byte	$01
000083r 1  07           	.byte	$07
000084r 1  05           	.byte	$05
000085r 1  01           	.byte	$01
000086r 1  06           	.byte	$06
000087r 1  05           	.byte	$05
000088r 1  01           	.byte	$01
000089r 1  00           	.byte	$00
00008Ar 1               _title:
00008Ar 1  03           	.byte	$03
00008Br 1  00           	.byte	$00
00008Cr 1  03           	.byte	$03
00008Dr 1  0B           	.byte	$0B
00008Er 1  01           	.byte	$01
00008Fr 1  01           	.byte	$01
000090r 1  00           	.byte	$00
000091r 1  03           	.byte	$03
000092r 1  03           	.byte	$03
000093r 1  01           	.byte	$01
000094r 1  01           	.byte	$01
000095r 1  00           	.byte	$00
000096r 1  03           	.byte	$03
000097r 1  16           	.byte	$16
000098r 1  30           	.byte	$30
000099r 1  01           	.byte	$01
00009Ar 1  01           	.byte	$01
00009Br 1  31           	.byte	$31
00009Cr 1  00           	.byte	$00
00009Dr 1  00           	.byte	$00
00009Er 1  30           	.byte	$30
00009Fr 1  01           	.byte	$01
0000A0r 1  01           	.byte	$01
0000A1r 1  31           	.byte	$31
0000A2r 1  00           	.byte	$00
0000A3r 1  03           	.byte	$03
0000A4r 1  15           	.byte	$15
0000A5r 1  01           	.byte	$01
0000A6r 1  03           	.byte	$03
0000A7r 1  03           	.byte	$03
0000A8r 1  00           	.byte	$00
0000A9r 1  00           	.byte	$00
0000AAr 1  01           	.byte	$01
0000ABr 1  03           	.byte	$03
0000ACr 1  03           	.byte	$03
0000ADr 1  00           	.byte	$00
0000AEr 1  00           	.byte	$00
0000AFr 1  16           	.byte	$16
0000B0r 1  0B           	.byte	$0B
0000B1r 1  12           	.byte	$12
0000B2r 1  12           	.byte	$12
0000B3r 1  17           	.byte	$17
0000B4r 1  00           	.byte	$00
0000B5r 1  03           	.byte	$03
0000B6r 1  0E           	.byte	$0E
0000B7r 1  01           	.byte	$01
0000B8r 1  03           	.byte	$03
0000B9r 1  03           	.byte	$03
0000BAr 1  00           	.byte	$00
0000BBr 1  00           	.byte	$00
0000BCr 1  01           	.byte	$01
0000BDr 1  03           	.byte	$03
0000BEr 1  03           	.byte	$03
0000BFr 1  00           	.byte	$00
0000C0r 1  03           	.byte	$03
0000C1r 1  06           	.byte	$06
0000C2r 1  17           	.byte	$17
0000C3r 1  0B           	.byte	$0B
0000C4r 1  0C           	.byte	$0C
0000C5r 1  16           	.byte	$16
0000C6r 1  00           	.byte	$00
0000C7r 1  03           	.byte	$03
0000C8r 1  0A           	.byte	$0A
0000C9r 1  32           	.byte	$32
0000CAr 1  01           	.byte	$01
0000CBr 1  01           	.byte	$01
0000CCr 1  33           	.byte	$33
0000CDr 1  00           	.byte	$00
0000CEr 1  00           	.byte	$00
0000CFr 1  32           	.byte	$32
0000D0r 1  01           	.byte	$01
0000D1r 1  01           	.byte	$01
0000D2r 1  33           	.byte	$33
0000D3r 1  00           	.byte	$00
0000D4r 1  03           	.byte	$03
0000D5r 1  04           	.byte	$04
0000D6r 1  28           	.byte	$28
0000D7r 1  00           	.byte	$00
0000D8r 1  03           	.byte	$03
0000D9r 1  10           	.byte	$10
0000DAr 1  01           	.byte	$01
0000DBr 1  01           	.byte	$01
0000DCr 1  00           	.byte	$00
0000DDr 1  03           	.byte	$03
0000DEr 1  03           	.byte	$03
0000DFr 1  01           	.byte	$01
0000E0r 1  01           	.byte	$01
0000E1r 1  00           	.byte	$00
0000E2r 1  03           	.byte	$03
0000E3r 1  06           	.byte	$06
0000E4r 1  28           	.byte	$28
0000E5r 1  00           	.byte	$00
0000E6r 1  03           	.byte	$03
0000E7r 1  0C           	.byte	$0C
0000E8r 1  30           	.byte	$30
0000E9r 1  01           	.byte	$01
0000EAr 1  03           	.byte	$03
0000EBr 1  0B           	.byte	$0B
0000ECr 1  31           	.byte	$31
0000EDr 1  00           	.byte	$00
0000EEr 1  03           	.byte	$03
0000EFr 1  04           	.byte	$04
0000F0r 1  28           	.byte	$28
0000F1r 1  00           	.byte	$00
0000F2r 1  03           	.byte	$03
0000F3r 1  0A           	.byte	$0A
0000F4r 1  30           	.byte	$30
0000F5r 1  01           	.byte	$01
0000F6r 1  02           	.byte	$02
0000F7r 1  02           	.byte	$02
0000F8r 1  01           	.byte	$01
0000F9r 1  03           	.byte	$03
0000FAr 1  02           	.byte	$02
0000FBr 1  02           	.byte	$02
0000FCr 1  01           	.byte	$01
0000FDr 1  01           	.byte	$01
0000FEr 1  02           	.byte	$02
0000FFr 1  03           	.byte	$03
000100r 1  02           	.byte	$02
000101r 1  01           	.byte	$01
000102r 1  01           	.byte	$01
000103r 1  31           	.byte	$31
000104r 1  00           	.byte	$00
000105r 1  03           	.byte	$03
000106r 1  0F           	.byte	$0F
000107r 1  01           	.byte	$01
000108r 1  01           	.byte	$01
000109r 1  02           	.byte	$02
00010Ar 1  01           	.byte	$01
00010Br 1  02           	.byte	$02
00010Cr 1  01           	.byte	$01
00010Dr 1  02           	.byte	$02
00010Er 1  01           	.byte	$01
00010Fr 1  02           	.byte	$02
000110r 1  01           	.byte	$01
000111r 1  02           	.byte	$02
000112r 1  01           	.byte	$01
000113r 1  02           	.byte	$02
000114r 1  01           	.byte	$01
000115r 1  03           	.byte	$03
000116r 1  02           	.byte	$02
000117r 1  00           	.byte	$00
000118r 1  03           	.byte	$03
000119r 1  0F           	.byte	$0F
00011Ar 1  01           	.byte	$01
00011Br 1  01           	.byte	$01
00011Cr 1  02           	.byte	$02
00011Dr 1  02           	.byte	$02
00011Er 1  01           	.byte	$01
00011Fr 1  01           	.byte	$01
000120r 1  02           	.byte	$02
000121r 1  03           	.byte	$03
000122r 1  02           	.byte	$02
000123r 1  01           	.byte	$01
000124r 1  02           	.byte	$02
000125r 1  02           	.byte	$02
000126r 1  01           	.byte	$01
000127r 1  03           	.byte	$03
000128r 1  03           	.byte	$03
000129r 1  00           	.byte	$00
00012Ar 1  03           	.byte	$03
00012Br 1  0F           	.byte	$0F
00012Cr 1  01           	.byte	$01
00012Dr 1  01           	.byte	$01
00012Er 1  02           	.byte	$02
00012Fr 1  01           	.byte	$01
000130r 1  02           	.byte	$02
000131r 1  01           	.byte	$01
000132r 1  02           	.byte	$02
000133r 1  01           	.byte	$01
000134r 1  02           	.byte	$02
000135r 1  01           	.byte	$01
000136r 1  02           	.byte	$02
000137r 1  01           	.byte	$01
000138r 1  02           	.byte	$02
000139r 1  01           	.byte	$01
00013Ar 1  03           	.byte	$03
00013Br 1  02           	.byte	$02
00013Cr 1  00           	.byte	$00
00013Dr 1  03           	.byte	$03
00013Er 1  0F           	.byte	$0F
00013Fr 1  32           	.byte	$32
000140r 1  01           	.byte	$01
000141r 1  02           	.byte	$02
000142r 1  02           	.byte	$02
000143r 1  01           	.byte	$01
000144r 1  01           	.byte	$01
000145r 1  02           	.byte	$02
000146r 1  01           	.byte	$01
000147r 1  02           	.byte	$02
000148r 1  01           	.byte	$01
000149r 1  02           	.byte	$02
00014Ar 1  01           	.byte	$01
00014Br 1  02           	.byte	$02
00014Cr 1  01           	.byte	$01
00014Dr 1  01           	.byte	$01
00014Er 1  33           	.byte	$33
00014Fr 1  00           	.byte	$00
000150r 1  03           	.byte	$03
000151r 1  10           	.byte	$10
000152r 1  32           	.byte	$32
000153r 1  01           	.byte	$01
000154r 1  03           	.byte	$03
000155r 1  0B           	.byte	$0B
000156r 1  33           	.byte	$33
000157r 1  00           	.byte	$00
000158r 1  03           	.byte	$03
000159r 1  12           	.byte	$12
00015Ar 1  32           	.byte	$32
00015Br 1  01           	.byte	$01
00015Cr 1  03           	.byte	$03
00015Dr 1  09           	.byte	$09
00015Er 1  33           	.byte	$33
00015Fr 1  00           	.byte	$00
000160r 1  03           	.byte	$03
000161r 1  2B           	.byte	$2B
000162r 1  30           	.byte	$30
000163r 1  01           	.byte	$01
000164r 1  03           	.byte	$03
000165r 1  02           	.byte	$02
000166r 1  31           	.byte	$31
000167r 1  00           	.byte	$00
000168r 1  30           	.byte	$30
000169r 1  01           	.byte	$01
00016Ar 1  03           	.byte	$03
00016Br 1  02           	.byte	$02
00016Cr 1  31           	.byte	$31
00016Dr 1  00           	.byte	$00
00016Er 1  01           	.byte	$01
00016Fr 1  00           	.byte	$00
000170r 1  01           	.byte	$01
000171r 1  00           	.byte	$00
000172r 1  01           	.byte	$01
000173r 1  00           	.byte	$00
000174r 1  01           	.byte	$01
000175r 1  03           	.byte	$03
000176r 1  02           	.byte	$02
000177r 1  31           	.byte	$31
000178r 1  00           	.byte	$00
000179r 1  30           	.byte	$30
00017Ar 1  01           	.byte	$01
00017Br 1  01           	.byte	$01
00017Cr 1  31           	.byte	$31
00017Dr 1  01           	.byte	$01
00017Er 1  00           	.byte	$00
00017Fr 1  01           	.byte	$01
000180r 1  00           	.byte	$00
000181r 1  00           	.byte	$00
000182r 1  01           	.byte	$01
000183r 1  00           	.byte	$00
000184r 1  03           	.byte	$03
000185r 1  02           	.byte	$02
000186r 1  33           	.byte	$33
000187r 1  00           	.byte	$00
000188r 1  01           	.byte	$01
000189r 1  00           	.byte	$00
00018Ar 1  03           	.byte	$03
00018Br 1  02           	.byte	$02
00018Cr 1  01           	.byte	$01
00018Dr 1  00           	.byte	$00
00018Er 1  01           	.byte	$01
00018Fr 1  00           	.byte	$00
000190r 1  01           	.byte	$01
000191r 1  00           	.byte	$00
000192r 1  01           	.byte	$01
000193r 1  00           	.byte	$00
000194r 1  01           	.byte	$01
000195r 1  00           	.byte	$00
000196r 1  00           	.byte	$00
000197r 1  01           	.byte	$01
000198r 1  00           	.byte	$00
000199r 1  01           	.byte	$01
00019Ar 1  00           	.byte	$00
00019Br 1  00           	.byte	$00
00019Cr 1  01           	.byte	$01
00019Dr 1  01           	.byte	$01
00019Er 1  00           	.byte	$00
00019Fr 1  01           	.byte	$01
0001A0r 1  00           	.byte	$00
0001A1r 1  00           	.byte	$00
0001A2r 1  01           	.byte	$01
0001A3r 1  00           	.byte	$00
0001A4r 1  03           	.byte	$03
0001A5r 1  04           	.byte	$04
0001A6r 1  01           	.byte	$01
0001A7r 1  00           	.byte	$00
0001A8r 1  03           	.byte	$03
0001A9r 1  02           	.byte	$02
0001AAr 1  01           	.byte	$01
0001ABr 1  00           	.byte	$00
0001ACr 1  01           	.byte	$01
0001ADr 1  00           	.byte	$00
0001AEr 1  01           	.byte	$01
0001AFr 1  00           	.byte	$00
0001B0r 1  01           	.byte	$01
0001B1r 1  00           	.byte	$00
0001B2r 1  01           	.byte	$01
0001B3r 1  03           	.byte	$03
0001B4r 1  02           	.byte	$02
0001B5r 1  00           	.byte	$00
0001B6r 1  00           	.byte	$00
0001B7r 1  01           	.byte	$01
0001B8r 1  00           	.byte	$00
0001B9r 1  00           	.byte	$00
0001BAr 1  01           	.byte	$01
0001BBr 1  32           	.byte	$32
0001BCr 1  01           	.byte	$01
0001BDr 1  33           	.byte	$33
0001BEr 1  00           	.byte	$00
0001BFr 1  00           	.byte	$00
0001C0r 1  01           	.byte	$01
0001C1r 1  00           	.byte	$00
0001C2r 1  03           	.byte	$03
0001C3r 1  02           	.byte	$02
0001C4r 1  31           	.byte	$31
0001C5r 1  00           	.byte	$00
0001C6r 1  01           	.byte	$01
0001C7r 1  00           	.byte	$00
0001C8r 1  03           	.byte	$03
0001C9r 1  02           	.byte	$02
0001CAr 1  01           	.byte	$01
0001CBr 1  00           	.byte	$00
0001CCr 1  01           	.byte	$01
0001CDr 1  00           	.byte	$00
0001CEr 1  01           	.byte	$01
0001CFr 1  00           	.byte	$00
0001D0r 1  01           	.byte	$01
0001D1r 1  00           	.byte	$00
0001D2r 1  01           	.byte	$01
0001D3r 1  00           	.byte	$00
0001D4r 1  00           	.byte	$00
0001D5r 1  01           	.byte	$01
0001D6r 1  00           	.byte	$00
0001D7r 1  01           	.byte	$01
0001D8r 1  00           	.byte	$00
0001D9r 1  00           	.byte	$00
0001DAr 1  01           	.byte	$01
0001DBr 1  00           	.byte	$00
0001DCr 1  01           	.byte	$01
0001DDr 1  00           	.byte	$00
0001DEr 1  03           	.byte	$03
0001DFr 1  02           	.byte	$02
0001E0r 1  32           	.byte	$32
0001E1r 1  01           	.byte	$01
0001E2r 1  03           	.byte	$03
0001E3r 1  02           	.byte	$02
0001E4r 1  33           	.byte	$33
0001E5r 1  00           	.byte	$00
0001E6r 1  32           	.byte	$32
0001E7r 1  01           	.byte	$01
0001E8r 1  03           	.byte	$03
0001E9r 1  02           	.byte	$02
0001EAr 1  33           	.byte	$33
0001EBr 1  00           	.byte	$00
0001ECr 1  32           	.byte	$32
0001EDr 1  01           	.byte	$01
0001EEr 1  00           	.byte	$00
0001EFr 1  01           	.byte	$01
0001F0r 1  33           	.byte	$33
0001F1r 1  00           	.byte	$00
0001F2r 1  01           	.byte	$01
0001F3r 1  03           	.byte	$03
0001F4r 1  02           	.byte	$02
0001F5r 1  33           	.byte	$33
0001F6r 1  00           	.byte	$00
0001F7r 1  32           	.byte	$32
0001F8r 1  01           	.byte	$01
0001F9r 1  01           	.byte	$01
0001FAr 1  33           	.byte	$33
0001FBr 1  00           	.byte	$00
0001FCr 1  01           	.byte	$01
0001FDr 1  00           	.byte	$00
0001FEr 1  03           	.byte	$03
0001FFr 1  20           	.byte	$20
000200r 1  20           	.byte	$20
000201r 1  1E           	.byte	$1E
000202r 1  20           	.byte	$20
000203r 1  22           	.byte	$22
000204r 1  00           	.byte	$00
000205r 1  05           	.byte	$05
000206r 1  0C           	.byte	$0C
000207r 1  0F           	.byte	$0F
000208r 1  0C           	.byte	$0C
000209r 1  05           	.byte	$05
00020Ar 1  0C           	.byte	$0C
00020Br 1  0F           	.byte	$0F
00020Cr 1  0C           	.byte	$0C
00020Dr 1  00           	.byte	$00
00020Er 1  0F           	.byte	$0F
00020Fr 1  04           	.byte	$04
000210r 1  0C           	.byte	$0C
000211r 1  04           	.byte	$04
000212r 1  05           	.byte	$05
000213r 1  04           	.byte	$04
000214r 1  12           	.byte	$12
000215r 1  00           	.byte	$00
000216r 1  03           	.byte	$03
000217r 1  50           	.byte	$50
000218r 1  34           	.byte	$34
000219r 1  02           	.byte	$02
00021Ar 1  02           	.byte	$02
00021Br 1  35           	.byte	$35
00021Cr 1  00           	.byte	$00
00021Dr 1  02           	.byte	$02
00021Er 1  00           	.byte	$00
00021Fr 1  00           	.byte	$00
000220r 1  02           	.byte	$02
000221r 1  00           	.byte	$00
000222r 1  02           	.byte	$02
000223r 1  00           	.byte	$00
000224r 1  00           	.byte	$00
000225r 1  02           	.byte	$02
000226r 1  00           	.byte	$00
000227r 1  03           	.byte	$03
000228r 1  11           	.byte	$11
000229r 1  02           	.byte	$02
00022Ar 1  00           	.byte	$00
00022Br 1  00           	.byte	$00
00022Cr 1  02           	.byte	$02
00022Dr 1  00           	.byte	$00
00022Er 1  02           	.byte	$02
00022Fr 1  00           	.byte	$00
000230r 1  00           	.byte	$00
000231r 1  02           	.byte	$02
000232r 1  00           	.byte	$00
000233r 1  02           	.byte	$02
000234r 1  35           	.byte	$35
000235r 1  00           	.byte	$00
000236r 1  02           	.byte	$02
000237r 1  00           	.byte	$00
000238r 1  03           	.byte	$03
000239r 1  11           	.byte	$11
00023Ar 1  02           	.byte	$02
00023Br 1  00           	.byte	$00
00023Cr 1  03           	.byte	$03
00023Dr 1  03           	.byte	$03
00023Er 1  02           	.byte	$02
00023Fr 1  00           	.byte	$00
000240r 1  00           	.byte	$00
000241r 1  02           	.byte	$02
000242r 1  00           	.byte	$00
000243r 1  02           	.byte	$02
000244r 1  36           	.byte	$36
000245r 1  35           	.byte	$35
000246r 1  02           	.byte	$02
000247r 1  00           	.byte	$00
000248r 1  03           	.byte	$03
000249r 1  11           	.byte	$11
00024Ar 1  02           	.byte	$02
00024Br 1  00           	.byte	$00
00024Cr 1  34           	.byte	$34
00024Dr 1  02           	.byte	$02
00024Er 1  00           	.byte	$00
00024Fr 1  02           	.byte	$02
000250r 1  00           	.byte	$00
000251r 1  00           	.byte	$00
000252r 1  02           	.byte	$02
000253r 1  00           	.byte	$00
000254r 1  02           	.byte	$02
000255r 1  00           	.byte	$00
000256r 1  36           	.byte	$36
000257r 1  02           	.byte	$02
000258r 1  00           	.byte	$00
000259r 1  03           	.byte	$03
00025Ar 1  11           	.byte	$11
00025Br 1  36           	.byte	$36
00025Cr 1  02           	.byte	$02
00025Dr 1  02           	.byte	$02
00025Er 1  37           	.byte	$37
00025Fr 1  00           	.byte	$00
000260r 1  36           	.byte	$36
000261r 1  02           	.byte	$02
000262r 1  02           	.byte	$02
000263r 1  37           	.byte	$37
000264r 1  00           	.byte	$00
000265r 1  02           	.byte	$02
000266r 1  00           	.byte	$00
000267r 1  00           	.byte	$00
000268r 1  02           	.byte	$02
000269r 1  00           	.byte	$00
00026Ar 1  03           	.byte	$03
00026Br 1  6A           	.byte	$6A
00026Cr 1  00           	.byte	$00
00026Dr 1  03           	.byte	$03
00026Er 1  00           	.byte	$00
00026Fr 1               _boxes_0_data:
00026Fr 1  00           	.byte	$00
000270r 1  00           	.byte	$00
000271r 1  01           	.byte	$01
000272r 1  00           	.byte	$00
000273r 1  00           	.byte	$00
000274r 1  08           	.byte	$08
000275r 1  01           	.byte	$01
000276r 1  00           	.byte	$00
000277r 1  08           	.byte	$08
000278r 1  00           	.byte	$00
000279r 1  01           	.byte	$01
00027Ar 1  00           	.byte	$00
00027Br 1  08           	.byte	$08
00027Cr 1  08           	.byte	$08
00027Dr 1  01           	.byte	$01
00027Er 1  00           	.byte	$00
00027Fr 1  10           	.byte	$10
000280r 1  00           	.byte	$00
000281r 1  01           	.byte	$01
000282r 1  00           	.byte	$00
000283r 1  10           	.byte	$10
000284r 1  08           	.byte	$08
000285r 1  01           	.byte	$01
000286r 1  00           	.byte	$00
000287r 1  18           	.byte	$18
000288r 1  00           	.byte	$00
000289r 1  01           	.byte	$01
00028Ar 1  00           	.byte	$00
00028Br 1  18           	.byte	$18
00028Cr 1  08           	.byte	$08
00028Dr 1  01           	.byte	$01
00028Er 1  00           	.byte	$00
00028Fr 1  00           	.byte	$00
000290r 1  10           	.byte	$10
000291r 1  01           	.byte	$01
000292r 1  00           	.byte	$00
000293r 1  00           	.byte	$00
000294r 1  18           	.byte	$18
000295r 1  01           	.byte	$01
000296r 1  00           	.byte	$00
000297r 1  08           	.byte	$08
000298r 1  10           	.byte	$10
000299r 1  01           	.byte	$01
00029Ar 1  00           	.byte	$00
00029Br 1  10           	.byte	$10
00029Cr 1  10           	.byte	$10
00029Dr 1  01           	.byte	$01
00029Er 1  00           	.byte	$00
00029Fr 1  18           	.byte	$18
0002A0r 1  10           	.byte	$10
0002A1r 1  01           	.byte	$01
0002A2r 1  00           	.byte	$00
0002A3r 1  08           	.byte	$08
0002A4r 1  18           	.byte	$18
0002A5r 1  01           	.byte	$01
0002A6r 1  00           	.byte	$00
0002A7r 1  10           	.byte	$10
0002A8r 1  18           	.byte	$18
0002A9r 1  01           	.byte	$01
0002AAr 1  00           	.byte	$00
0002ABr 1  18           	.byte	$18
0002ACr 1  18           	.byte	$18
0002ADr 1  01           	.byte	$01
0002AEr 1  00           	.byte	$00
0002AFr 1  80           	.byte	$80
0002B0r 1               _boxes_1_data:
0002B0r 1  08           	.byte	$08
0002B1r 1  00           	.byte	$00
0002B2r 1  01           	.byte	$01
0002B3r 1  00           	.byte	$00
0002B4r 1  10           	.byte	$10
0002B5r 1  00           	.byte	$00
0002B6r 1  01           	.byte	$01
0002B7r 1  00           	.byte	$00
0002B8r 1  08           	.byte	$08
0002B9r 1  08           	.byte	$08
0002BAr 1  01           	.byte	$01
0002BBr 1  00           	.byte	$00
0002BCr 1  10           	.byte	$10
0002BDr 1  08           	.byte	$08
0002BEr 1  01           	.byte	$01
0002BFr 1  00           	.byte	$00
0002C0r 1  00           	.byte	$00
0002C1r 1  10           	.byte	$10
0002C2r 1  01           	.byte	$01
0002C3r 1  00           	.byte	$00
0002C4r 1  08           	.byte	$08
0002C5r 1  10           	.byte	$10
0002C6r 1  01           	.byte	$01
0002C7r 1  00           	.byte	$00
0002C8r 1  10           	.byte	$10
0002C9r 1  10           	.byte	$10
0002CAr 1  01           	.byte	$01
0002CBr 1  00           	.byte	$00
0002CCr 1  80           	.byte	$80
0002CDr 1               _boxes_list:
0002CDr 1  rr rr        	.addr	_boxes_0_data
0002CFr 1  rr rr        	.addr	_boxes_1_data
0002D1r 1               _enemy_0_data:
0002D1r 1  00           	.byte	$00
0002D2r 1  09           	.byte	$09
0002D3r 1  04           	.byte	$04
0002D4r 1  01           	.byte	$01
0002D5r 1  08           	.byte	$08
0002D6r 1  09           	.byte	$09
0002D7r 1  05           	.byte	$05
0002D8r 1  01           	.byte	$01
0002D9r 1  10           	.byte	$10
0002DAr 1  09           	.byte	$09
0002DBr 1  06           	.byte	$06
0002DCr 1  01           	.byte	$01
0002DDr 1  08           	.byte	$08
0002DEr 1  01           	.byte	$01
0002DFr 1  02           	.byte	$02
0002E0r 1  01           	.byte	$01
0002E1r 1  10           	.byte	$10
0002E2r 1  01           	.byte	$01
0002E3r 1  03           	.byte	$03
0002E4r 1  01           	.byte	$01
0002E5r 1  18           	.byte	$18
0002E6r 1  09           	.byte	$09
0002E7r 1  07           	.byte	$07
0002E8r 1  01           	.byte	$01
0002E9r 1  00           	.byte	$00
0002EAr 1  11           	.byte	$11
0002EBr 1  08           	.byte	$08
0002ECr 1  01           	.byte	$01
0002EDr 1  08           	.byte	$08
0002EEr 1  11           	.byte	$11
0002EFr 1  09           	.byte	$09
0002F0r 1  01           	.byte	$01
0002F1r 1  10           	.byte	$10
0002F2r 1  11           	.byte	$11
0002F3r 1  0A           	.byte	$0A
0002F4r 1  01           	.byte	$01
0002F5r 1  18           	.byte	$18
0002F6r 1  11           	.byte	$11
0002F7r 1  0B           	.byte	$0B
0002F8r 1  01           	.byte	$01
0002F9r 1  00           	.byte	$00
0002FAr 1  19           	.byte	$19
0002FBr 1  0C           	.byte	$0C
0002FCr 1  01           	.byte	$01
0002FDr 1  08           	.byte	$08
0002FEr 1  19           	.byte	$19
0002FFr 1  0D           	.byte	$0D
000300r 1  01           	.byte	$01
000301r 1  10           	.byte	$10
000302r 1  19           	.byte	$19
000303r 1  0E           	.byte	$0E
000304r 1  01           	.byte	$01
000305r 1  18           	.byte	$18
000306r 1  19           	.byte	$19
000307r 1  0F           	.byte	$0F
000308r 1  01           	.byte	$01
000309r 1  80           	.byte	$80
00030Ar 1               _enemy_1_data:
00030Ar 1  00           	.byte	$00
00030Br 1  08           	.byte	$08
00030Cr 1  04           	.byte	$04
00030Dr 1  01           	.byte	$01
00030Er 1  08           	.byte	$08
00030Fr 1  08           	.byte	$08
000310r 1  05           	.byte	$05
000311r 1  01           	.byte	$01
000312r 1  10           	.byte	$10
000313r 1  08           	.byte	$08
000314r 1  06           	.byte	$06
000315r 1  01           	.byte	$01
000316r 1  08           	.byte	$08
000317r 1  00           	.byte	$00
000318r 1  02           	.byte	$02
000319r 1  01           	.byte	$01
00031Ar 1  10           	.byte	$10
00031Br 1  00           	.byte	$00
00031Cr 1  03           	.byte	$03
00031Dr 1  01           	.byte	$01
00031Er 1  18           	.byte	$18
00031Fr 1  08           	.byte	$08
000320r 1  07           	.byte	$07
000321r 1  01           	.byte	$01
000322r 1  00           	.byte	$00
000323r 1  10           	.byte	$10
000324r 1  08           	.byte	$08
000325r 1  01           	.byte	$01
000326r 1  08           	.byte	$08
000327r 1  10           	.byte	$10
000328r 1  09           	.byte	$09
000329r 1  01           	.byte	$01
00032Ar 1  10           	.byte	$10
00032Br 1  10           	.byte	$10
00032Cr 1  0A           	.byte	$0A
00032Dr 1  01           	.byte	$01
00032Er 1  18           	.byte	$18
00032Fr 1  10           	.byte	$10
000330r 1  0B           	.byte	$0B
000331r 1  01           	.byte	$01
000332r 1  00           	.byte	$00
000333r 1  18           	.byte	$18
000334r 1  10           	.byte	$10
000335r 1  01           	.byte	$01
000336r 1  08           	.byte	$08
000337r 1  18           	.byte	$18
000338r 1  11           	.byte	$11
000339r 1  01           	.byte	$01
00033Ar 1  10           	.byte	$10
00033Br 1  18           	.byte	$18
00033Cr 1  12           	.byte	$12
00033Dr 1  01           	.byte	$01
00033Er 1  18           	.byte	$18
00033Fr 1  18           	.byte	$18
000340r 1  13           	.byte	$13
000341r 1  01           	.byte	$01
000342r 1  80           	.byte	$80
000343r 1               _enemy_list:
000343r 1  rr rr        	.addr	_enemy_0_data
000345r 1  rr rr        	.addr	_enemy_0_data
000347r 1  rr rr        	.addr	_enemy_0_data
000349r 1  rr rr        	.addr	_enemy_0_data
00034Br 1  rr rr        	.addr	_enemy_0_data
00034Dr 1  rr rr        	.addr	_enemy_0_data
00034Fr 1  rr rr        	.addr	_enemy_1_data
000351r 1  rr rr        	.addr	_enemy_1_data
000353r 1  rr rr        	.addr	_enemy_1_data
000355r 1  rr rr        	.addr	_enemy_1_data
000357r 1  rr rr        	.addr	_enemy_1_data
000359r 1  rr rr        	.addr	_enemy_1_data
00035Br 1               _pal:
00035Br 1  0F           	.byte	$0F
00035Cr 1  27           	.byte	$27
00035Dr 1  17           	.byte	$17
00035Er 1  07           	.byte	$07
00035Fr 1  0F           	.byte	$0F
000360r 1  0F           	.byte	$0F
000361r 1  37           	.byte	$37
000362r 1  10           	.byte	$10
000363r 1  0F           	.byte	$0F
000364r 1  00           	.byte	$00
000365r 1  10           	.byte	$10
000366r 1  30           	.byte	$30
000367r 1  0F           	.byte	$0F
000368r 1  0F           	.byte	$0F
000369r 1  0F           	.byte	$0F
00036Ar 1  0F           	.byte	$0F
00036Br 1  0F           	.byte	$0F
00036Cr 1  30           	.byte	$30
00036Dr 1  0F           	.byte	$0F
00036Er 1  0F           	.byte	$0F
00036Fr 1  0F           	.byte	$0F
000370r 1  0F           	.byte	$0F
000371r 1  27           	.byte	$27
000372r 1  37           	.byte	$37
000373r 1  0F           	.byte	$0F
000374r 1  0F           	.byte	$0F
000375r 1  0F           	.byte	$0F
000376r 1  0F           	.byte	$0F
000377r 1  0F           	.byte	$0F
000378r 1  0F           	.byte	$0F
000379r 1  0F           	.byte	$0F
00037Ar 1  0F           	.byte	$0F
00037Br 1               
00037Br 1               .segment	"BSS"
000000r 1               
000000r 1               .segment	"ZEROPAGE"
000000r 1               _pad2_zapper:
000000r 1  00           	.res	1,$00
000001r 1               _zapper_ready:
000001r 1  00           	.res	1,$00
000002r 1               _hit_detected:
000002r 1  00           	.res	1,$00
000003r 1               _temp1:
000003r 1  00           	.res	1,$00
000004r 1               _temp2:
000004r 1  00           	.res	1,$00
000005r 1               _state:
000005r 1  00           	.res	1,$00
000006r 1               _scroll_x:
000006r 1  00           	.res	1,$00
000007r 1               _enemy_x:
000007r 1  00           	.res	1,$00
000008r 1               _enemy_y:
000008r 1  00           	.res	1,$00
000009r 1               _enemy_type:
000009r 1  00           	.res	1,$00
00000Ar 1               _enemy_frame:
00000Ar 1  00           	.res	1,$00
00000Br 1               
00000Br 1               ; ---------------------------------------------------------------
00000Br 1               ; void __near__ draw_title_box (void)
00000Br 1               ; ---------------------------------------------------------------
00000Br 1               
00000Br 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_draw_title_box: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; oam_meta_spr(110,58,boxes_list[0]);
000000r 1               ;
000000r 1  A9 6E        	lda     #$6E
000002r 1  20 rr rr     	jsr     pusha
000005r 1  A9 3A        	lda     #$3A
000007r 1  20 rr rr     	jsr     pusha
00000Ar 1  AD rr rr     	lda     _boxes_list
00000Dr 1  AE rr rr     	ldx     _boxes_list+1
000010r 1  20 rr rr     	jsr     _oam_meta_spr
000013r 1               ;
000013r 1               ; }
000013r 1               ;
000013r 1  60           	rts
000014r 1               
000014r 1               .endproc
000014r 1               
000014r 1               ; ---------------------------------------------------------------
000014r 1               ; void __near__ draw_enemy_box (void)
000014r 1               ; ---------------------------------------------------------------
000014r 1               
000014r 1               .segment	"CODE"
000014r 1               
000014r 1               .proc	_draw_enemy_box: near
000014r 1               
000014r 1               .segment	"CODE"
000014r 1               
000014r 1               ;
000014r 1               ; oam_meta_spr(enemy_x,enemy_y,boxes_list[1]);
000014r 1               ;
000014r 1  A5 rr        	lda     _enemy_x
000016r 1  20 rr rr     	jsr     pusha
000019r 1  A5 rr        	lda     _enemy_y
00001Br 1  20 rr rr     	jsr     pusha
00001Er 1  AD rr rr     	lda     _boxes_list+2
000021r 1  AE rr rr     	ldx     _boxes_list+2+1
000024r 1  20 rr rr     	jsr     _oam_meta_spr
000027r 1               ;
000027r 1               ; }
000027r 1               ;
000027r 1  60           	rts
000028r 1               
000028r 1               .endproc
000028r 1               
000028r 1               ; ---------------------------------------------------------------
000028r 1               ; void __near__ draw_enemy (void)
000028r 1               ; ---------------------------------------------------------------
000028r 1               
000028r 1               .segment	"CODE"
000028r 1               
000028r 1               .proc	_draw_enemy: near
000028r 1               
000028r 1               .segment	"CODE"
000028r 1               
000028r 1               ;
000028r 1               ; oam_meta_spr(enemy_x,enemy_y,enemy_list[enemy_frame]);
000028r 1               ;
000028r 1  A5 rr        	lda     _enemy_x
00002Ar 1  20 rr rr     	jsr     pusha
00002Dr 1  A5 rr        	lda     _enemy_y
00002Fr 1  20 rr rr     	jsr     pusha
000032r 1  A2 00        	ldx     #$00
000034r 1  A5 rr        	lda     _enemy_frame
000036r 1  20 rr rr     	jsr     aslax1
000039r 1  18           	clc
00003Ar 1  69 rr        	adc     #<(_enemy_list)
00003Cr 1  A8           	tay
00003Dr 1  8A           	txa
00003Er 1  69 rr        	adc     #>(_enemy_list)
000040r 1  AA           	tax
000041r 1  98           	tya
000042r 1  A0 01        	ldy     #$01
000044r 1  20 rr rr     	jsr     ldaxidx
000047r 1  20 rr rr     	jsr     _oam_meta_spr
00004Ar 1               ;
00004Ar 1               ; }
00004Ar 1               ;
00004Ar 1  60           	rts
00004Br 1               
00004Br 1               .endproc
00004Br 1               
00004Br 1               ; ---------------------------------------------------------------
00004Br 1               ; void __near__ main (void)
00004Br 1               ; ---------------------------------------------------------------
00004Br 1               
00004Br 1               .segment	"CODE"
00004Br 1               
00004Br 1               .proc	_main: near
00004Br 1               
00004Br 1               .segment	"CODE"
00004Br 1               
00004Br 1               ;
00004Br 1               ; ppu_off(); // screen off
00004Br 1               ;
00004Br 1  20 rr rr     	jsr     _ppu_off
00004Er 1               ;
00004Er 1               ; bank_bg(1);
00004Er 1               ;
00004Er 1  A9 01        	lda     #$01
000050r 1  20 rr rr     	jsr     _bank_bg
000053r 1               ;
000053r 1               ; pal_all(pal);
000053r 1               ;
000053r 1  A9 rr        	lda     #<(_pal)
000055r 1  A2 rr        	ldx     #>(_pal)
000057r 1  20 rr rr     	jsr     _pal_all
00005Ar 1               ;
00005Ar 1               ; vram_adr(NAMETABLE_A);
00005Ar 1               ;
00005Ar 1  A2 20        	ldx     #$20
00005Cr 1  A9 00        	lda     #$00
00005Er 1  20 rr rr     	jsr     _vram_adr
000061r 1               ;
000061r 1               ; vram_unrle(title);
000061r 1               ;
000061r 1  A9 rr        	lda     #<(_title)
000063r 1  A2 rr        	ldx     #>(_title)
000065r 1  20 rr rr     	jsr     _vram_unrle
000068r 1               ;
000068r 1               ; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
000068r 1               ;
000068r 1  20 rr rr     	jsr     _set_vram_buffer
00006Br 1               ;
00006Br 1               ; famistudio_music_play(0);
00006Br 1               ;
00006Br 1  A9 00        	lda     #$00
00006Dr 1  20 rr rr     	jsr     _famistudio_music_play
000070r 1               ;
000070r 1               ; ppu_on_all(); // turn on screen
000070r 1               ;
000070r 1  20 rr rr     	jsr     _ppu_on_all
000073r 1               ;
000073r 1               ; oam_set(0);
000073r 1               ;
000073r 1  A9 00        	lda     #$00
000075r 1  20 rr rr     	jsr     _oam_set
000078r 1               ;
000078r 1               ; oam_spr(256-8,21*8,0xff,0);
000078r 1               ;
000078r 1  A9 F8        	lda     #$F8
00007Ar 1  20 rr rr     	jsr     pusha
00007Dr 1  A9 A8        	lda     #$A8
00007Fr 1  20 rr rr     	jsr     pusha
000082r 1  A9 FF        	lda     #$FF
000084r 1  20 rr rr     	jsr     pusha
000087r 1  A9 00        	lda     #$00
000089r 1  20 rr rr     	jsr     _oam_spr
00008Cr 1               ;
00008Cr 1               ; while (1){
00008Cr 1               ;
00008Cr 1  4C rr rr     	jmp     L002D
00008Fr 1               ;
00008Fr 1               ; ppu_wait_nmi(); // wait till beginning of the frame
00008Fr 1               ;
00008Fr 1  20 rr rr     L0002:	jsr     _ppu_wait_nmi
000092r 1               ;
000092r 1               ; oam_clear();
000092r 1               ;
000092r 1  20 rr rr     	jsr     _oam_clear
000095r 1               ;
000095r 1               ; oam_set(0);
000095r 1               ;
000095r 1  A9 00        	lda     #$00
000097r 1  20 rr rr     	jsr     _oam_set
00009Ar 1               ;
00009Ar 1               ; oam_spr(256-8,21*8,0xff,0);
00009Ar 1               ;
00009Ar 1  A9 F8        	lda     #$F8
00009Cr 1  20 rr rr     	jsr     pusha
00009Fr 1  A9 A8        	lda     #$A8
0000A1r 1  20 rr rr     	jsr     pusha
0000A4r 1  A9 FF        	lda     #$FF
0000A6r 1  20 rr rr     	jsr     pusha
0000A9r 1  A9 00        	lda     #$00
0000ABr 1  20 rr rr     	jsr     _oam_spr
0000AEr 1               ;
0000AEr 1               ; if(shoot==0){
0000AEr 1               ;
0000AEr 1  A2 00        	ldx     #$00
0000B0r 1  AD rr rr     	lda     _shoot
0000B3r 1  C9 00        	cmp     #$00
0000B5r 1  20 rr rr     	jsr     booleq
0000B8r 1  D0 03 4C rr  	jeq     L0007
0000BCr 1  rr           
0000BDr 1               ;
0000BDr 1               ; if(timer0==0){
0000BDr 1               ;
0000BDr 1  A2 00        	ldx     #$00
0000BFr 1  AD rr rr     	lda     _timer0
0000C2r 1  C9 00        	cmp     #$00
0000C4r 1  20 rr rr     	jsr     booleq
0000C7r 1  D0 03 4C rr  	jeq     L0006
0000CBr 1  rr           
0000CCr 1               ;
0000CCr 1               ; famistudio_sfx_play(1, FAMISTUDIO_SFX_CH0);
0000CCr 1               ;
0000CCr 1  A9 01        	lda     #$01
0000CEr 1  20 rr rr     	jsr     pusha
0000D1r 1  A9 00        	lda     #$00
0000D3r 1  20 rr rr     	jsr     _famistudio_sfx_play
0000D6r 1               ;
0000D6r 1               ; shoot=5;
0000D6r 1               ;
0000D6r 1  A2 00        	ldx     #$00
0000D8r 1  A9 05        	lda     #$05
0000DAr 1  8D rr rr     	sta     _shoot
0000DDr 1               ;
0000DDr 1               ; }else{
0000DDr 1               ;
0000DDr 1  4C rr rr     	jmp     L0007
0000E0r 1               ;
0000E0r 1               ; timer0--;
0000E0r 1               ;
0000E0r 1  A2 00        L0006:	ldx     #$00
0000E2r 1  AD rr rr     	lda     _timer0
0000E5r 1  CE rr rr     	dec     _timer0
0000E8r 1               ;
0000E8r 1               ; zapper_ready = pad2_zapper ^ 1; // XOR last frame, make sure not held down still
0000E8r 1               ;
0000E8r 1  A2 00        L0007:	ldx     #$00
0000EAr 1  A5 rr        	lda     _pad2_zapper
0000ECr 1  49 01        	eor     #$01
0000EEr 1  A2 00        	ldx     #$00
0000F0r 1  85 rr        	sta     _zapper_ready
0000F2r 1               ;
0000F2r 1               ; pad2_zapper = zap_shoot(1); // controller slot 2
0000F2r 1               ;
0000F2r 1  A9 01        	lda     #$01
0000F4r 1  20 rr rr     	jsr     _zap_shoot
0000F7r 1  85 rr        	sta     _pad2_zapper
0000F9r 1               ;
0000F9r 1               ; if(state==1){
0000F9r 1               ;
0000F9r 1  A2 00        	ldx     #$00
0000FBr 1  A5 rr        	lda     _state
0000FDr 1  C9 01        	cmp     #$01
0000FFr 1  20 rr rr     	jsr     booleq
000102r 1  D0 03 4C rr  	jeq     L0011
000106r 1  rr           
000107r 1               ;
000107r 1               ; scroll_x+=5;
000107r 1               ;
000107r 1  A2 00        	ldx     #$00
000109r 1  A9 05        	lda     #$05
00010Br 1  18           	clc
00010Cr 1  65 rr        	adc     _scroll_x
00010Er 1  85 rr        	sta     _scroll_x
000110r 1               ;
000110r 1               ; draw_enemy();
000110r 1               ;
000110r 1  20 rr rr     	jsr     _draw_enemy
000113r 1               ;
000113r 1               ; if(enemy_frame==11){
000113r 1               ;
000113r 1  A2 00        	ldx     #$00
000115r 1  A5 rr        	lda     _enemy_frame
000117r 1  C9 0B        	cmp     #$0B
000119r 1  20 rr rr     	jsr     booleq
00011Cr 1  D0 03 4C rr  	jeq     L0009
000120r 1  rr           
000121r 1               ;
000121r 1               ; enemy_frame=0;
000121r 1               ;
000121r 1  A2 00        	ldx     #$00
000123r 1  A9 00        	lda     #$00
000125r 1  85 rr        	sta     _enemy_frame
000127r 1               ;
000127r 1               ; }else
000127r 1               ;
000127r 1  4C rr rr     	jmp     L000A
00012Ar 1               ;
00012Ar 1               ; enemy_frame++;
00012Ar 1               ;
00012Ar 1  A2 00        L0009:	ldx     #$00
00012Cr 1  A5 rr        	lda     _enemy_frame
00012Er 1  E6 rr        	inc     _enemy_frame
000130r 1               ;
000130r 1               ; if(enemy_type==0){
000130r 1               ;
000130r 1  A2 00        L000A:	ldx     #$00
000132r 1  A5 rr        	lda     _enemy_type
000134r 1  C9 00        	cmp     #$00
000136r 1  20 rr rr     	jsr     booleq
000139r 1  D0 03 4C rr  	jeq     L000B
00013Dr 1  rr           
00013Er 1               ;
00013Er 1               ; enemy_x++;
00013Er 1               ;
00013Er 1  A2 00        	ldx     #$00
000140r 1  A5 rr        	lda     _enemy_x
000142r 1  E6 rr        	inc     _enemy_x
000144r 1               ;
000144r 1               ; enemy_y=190;
000144r 1               ;
000144r 1  A2 00        	ldx     #$00
000146r 1  A9 BE        	lda     #$BE
000148r 1  85 rr        	sta     _enemy_y
00014Ar 1               ;
00014Ar 1               ; if(enemy_type==1){
00014Ar 1               ;
00014Ar 1  A2 00        L000B:	ldx     #$00
00014Cr 1  A5 rr        	lda     _enemy_type
00014Er 1  C9 01        	cmp     #$01
000150r 1  20 rr rr     	jsr     booleq
000153r 1  D0 03 4C rr  	jeq     L000C
000157r 1  rr           
000158r 1               ;
000158r 1               ; enemy_x+=3;
000158r 1               ;
000158r 1  A2 00        	ldx     #$00
00015Ar 1  A9 03        	lda     #$03
00015Cr 1  18           	clc
00015Dr 1  65 rr        	adc     _enemy_x
00015Fr 1  85 rr        	sta     _enemy_x
000161r 1               ;
000161r 1               ; enemy_y=190;
000161r 1               ;
000161r 1  A2 00        	ldx     #$00
000163r 1  A9 BE        	lda     #$BE
000165r 1  85 rr        	sta     _enemy_y
000167r 1               ;
000167r 1               ; if(enemy_type==2){
000167r 1               ;
000167r 1  A2 00        L000C:	ldx     #$00
000169r 1  A5 rr        	lda     _enemy_type
00016Br 1  C9 02        	cmp     #$02
00016Dr 1  20 rr rr     	jsr     booleq
000170r 1  D0 03 4C rr  	jeq     L0011
000174r 1  rr           
000175r 1               ;
000175r 1               ; enemy_x++;
000175r 1               ;
000175r 1  A2 00        	ldx     #$00
000177r 1  A5 rr        	lda     _enemy_x
000179r 1  E6 rr        	inc     _enemy_x
00017Br 1               ;
00017Br 1               ; if(floating_down==0){
00017Br 1               ;
00017Br 1  A2 00        	ldx     #$00
00017Dr 1  AD rr rr     	lda     _floating_down
000180r 1  C9 00        	cmp     #$00
000182r 1  20 rr rr     	jsr     booleq
000185r 1  D0 03 4C rr  	jeq     L000E
000189r 1  rr           
00018Ar 1               ;
00018Ar 1               ; enemy_y-=3;
00018Ar 1               ;
00018Ar 1  A2 00        	ldx     #$00
00018Cr 1  A5 rr        	lda     _enemy_y
00018Er 1  38           	sec
00018Fr 1  E9 03        	sbc     #$03
000191r 1  85 rr        	sta     _enemy_y
000193r 1               ;
000193r 1               ; if(enemy_y<100)
000193r 1               ;
000193r 1  A2 00        	ldx     #$00
000195r 1  A5 rr        	lda     _enemy_y
000197r 1  C9 64        	cmp     #$64
000199r 1  20 rr rr     	jsr     boolult
00019Cr 1  D0 03 4C rr  	jeq     L000F
0001A0r 1  rr           
0001A1r 1               ;
0001A1r 1               ; floating_down=1;
0001A1r 1               ;
0001A1r 1  A2 00        	ldx     #$00
0001A3r 1  A9 01        	lda     #$01
0001A5r 1  8D rr rr     	sta     _floating_down
0001A8r 1               ;
0001A8r 1               ; }else{
0001A8r 1               ;
0001A8r 1  4C rr rr     L000F:	jmp     L0011
0001ABr 1               ;
0001ABr 1               ; enemy_y+=3;
0001ABr 1               ;
0001ABr 1  A2 00        L000E:	ldx     #$00
0001ADr 1  A9 03        	lda     #$03
0001AFr 1  18           	clc
0001B0r 1  65 rr        	adc     _enemy_y
0001B2r 1  85 rr        	sta     _enemy_y
0001B4r 1               ;
0001B4r 1               ; if(enemy_y>190)
0001B4r 1               ;
0001B4r 1  A2 00        	ldx     #$00
0001B6r 1  A5 rr        	lda     _enemy_y
0001B8r 1  C9 BF        	cmp     #$BF
0001BAr 1  A9 00        	lda     #$00
0001BCr 1  A2 00        	ldx     #$00
0001BEr 1  2A           	rol     a
0001BFr 1  D0 03 4C rr  	jeq     L0011
0001C3r 1  rr           
0001C4r 1               ;
0001C4r 1               ; floating_down=0;
0001C4r 1               ;
0001C4r 1  A2 00        	ldx     #$00
0001C6r 1  A9 00        	lda     #$00
0001C8r 1  8D rr rr     	sta     _floating_down
0001CBr 1               ;
0001CBr 1               ; if(state==2){
0001CBr 1               ;
0001CBr 1  A2 00        L0011:	ldx     #$00
0001CDr 1  A5 rr        	lda     _state
0001CFr 1  C9 02        	cmp     #$02
0001D1r 1  20 rr rr     	jsr     booleq
0001D4r 1  D0 03 4C rr  	jeq     L0017
0001D8r 1  rr           
0001D9r 1               ;
0001D9r 1               ; if(timer==60){
0001D9r 1               ;
0001D9r 1  A2 00        	ldx     #$00
0001DBr 1  AD rr rr     	lda     _timer
0001DEr 1  C9 3C        	cmp     #$3C
0001E0r 1  20 rr rr     	jsr     booleq
0001E3r 1  D0 03 4C rr  	jeq     L0013
0001E7r 1  rr           
0001E8r 1               ;
0001E8r 1               ; one_vram_buffer(0x15, 0x210C);
0001E8r 1               ;
0001E8r 1  A9 15        	lda     #$15
0001EAr 1  20 rr rr     	jsr     pusha
0001EDr 1  A2 21        	ldx     #$21
0001EFr 1  A9 0C        	lda     #$0C
0001F1r 1  20 rr rr     	jsr     _one_vram_buffer
0001F4r 1               ;
0001F4r 1               ; one_vram_buffer(0x08, 0x210D);
0001F4r 1               ;
0001F4r 1  A9 08        	lda     #$08
0001F6r 1  20 rr rr     	jsr     pusha
0001F9r 1  A2 21        	ldx     #$21
0001FBr 1  A9 0D        	lda     #$0D
0001FDr 1  20 rr rr     	jsr     _one_vram_buffer
000200r 1               ;
000200r 1               ; one_vram_buffer(0x04, 0x210E);
000200r 1               ;
000200r 1  A9 04        	lda     #$04
000202r 1  20 rr rr     	jsr     pusha
000205r 1  A2 21        	ldx     #$21
000207r 1  A9 0E        	lda     #$0E
000209r 1  20 rr rr     	jsr     _one_vram_buffer
00020Cr 1               ;
00020Cr 1               ; one_vram_buffer(0x07, 0x210F);
00020Cr 1               ;
00020Cr 1  A9 07        	lda     #$07
00020Er 1  20 rr rr     	jsr     pusha
000211r 1  A2 21        	ldx     #$21
000213r 1  A9 0F        	lda     #$0F
000215r 1  20 rr rr     	jsr     _one_vram_buffer
000218r 1               ;
000218r 1               ; one_vram_buffer(0x1C, 0x2110);
000218r 1               ;
000218r 1  A9 1C        	lda     #$1C
00021Ar 1  20 rr rr     	jsr     pusha
00021Dr 1  A2 21        	ldx     #$21
00021Fr 1  A9 10        	lda     #$10
000221r 1  20 rr rr     	jsr     _one_vram_buffer
000224r 1               ;
000224r 1               ; timer--;
000224r 1               ;
000224r 1  A2 00        L0013:	ldx     #$00
000226r 1  AD rr rr     	lda     _timer
000229r 1  CE rr rr     	dec     _timer
00022Cr 1               ;
00022Cr 1               ; if(timer==0){
00022Cr 1               ;
00022Cr 1  A2 00        	ldx     #$00
00022Er 1  AD rr rr     	lda     _timer
000231r 1  C9 00        	cmp     #$00
000233r 1  20 rr rr     	jsr     booleq
000236r 1  D0 03 4C rr  	jeq     L0017
00023Ar 1  rr           
00023Br 1               ;
00023Br 1               ; one_vram_buffer(0x00, 0x210C);
00023Br 1               ;
00023Br 1  A9 00        	lda     #$00
00023Dr 1  20 rr rr     	jsr     pusha
000240r 1  A2 21        	ldx     #$21
000242r 1  A9 0C        	lda     #$0C
000244r 1  20 rr rr     	jsr     _one_vram_buffer
000247r 1               ;
000247r 1               ; one_vram_buffer(0x00, 0x210D);
000247r 1               ;
000247r 1  A9 00        	lda     #$00
000249r 1  20 rr rr     	jsr     pusha
00024Cr 1  A2 21        	ldx     #$21
00024Er 1  A9 0D        	lda     #$0D
000250r 1  20 rr rr     	jsr     _one_vram_buffer
000253r 1               ;
000253r 1               ; one_vram_buffer(0x00, 0x210E);
000253r 1               ;
000253r 1  A9 00        	lda     #$00
000255r 1  20 rr rr     	jsr     pusha
000258r 1  A2 21        	ldx     #$21
00025Ar 1  A9 0E        	lda     #$0E
00025Cr 1  20 rr rr     	jsr     _one_vram_buffer
00025Fr 1               ;
00025Fr 1               ; one_vram_buffer(0x00, 0x210F);
00025Fr 1               ;
00025Fr 1  A9 00        	lda     #$00
000261r 1  20 rr rr     	jsr     pusha
000264r 1  A2 21        	ldx     #$21
000266r 1  A9 0F        	lda     #$0F
000268r 1  20 rr rr     	jsr     _one_vram_buffer
00026Br 1               ;
00026Br 1               ; one_vram_buffer(0x00, 0x2110);
00026Br 1               ;
00026Br 1  A9 00        	lda     #$00
00026Dr 1  20 rr rr     	jsr     pusha
000270r 1  A2 21        	ldx     #$21
000272r 1  A9 10        	lda     #$10
000274r 1  20 rr rr     	jsr     _one_vram_buffer
000277r 1               ;
000277r 1               ; one_vram_buffer(0x00, 0x20A0);
000277r 1               ;
000277r 1  A9 00        	lda     #$00
000279r 1  20 rr rr     	jsr     pusha
00027Cr 1  A2 20        	ldx     #$20
00027Er 1  A9 A0        	lda     #$A0
000280r 1  20 rr rr     	jsr     _one_vram_buffer
000283r 1               ;
000283r 1               ; one_vram_buffer(0x00, 0x20A1);
000283r 1               ;
000283r 1  A9 00        	lda     #$00
000285r 1  20 rr rr     	jsr     pusha
000288r 1  A2 20        	ldx     #$20
00028Ar 1  A9 A1        	lda     #$A1
00028Cr 1  20 rr rr     	jsr     _one_vram_buffer
00028Fr 1               ;
00028Fr 1               ; one_vram_buffer(0x00, 0x20A2);
00028Fr 1               ;
00028Fr 1  A9 00        	lda     #$00
000291r 1  20 rr rr     	jsr     pusha
000294r 1  A2 20        	ldx     #$20
000296r 1  A9 A2        	lda     #$A2
000298r 1  20 rr rr     	jsr     _one_vram_buffer
00029Br 1               ;
00029Br 1               ; one_vram_buffer(0x00, 0x20A3);
00029Br 1               ;
00029Br 1  A9 00        	lda     #$00
00029Dr 1  20 rr rr     	jsr     pusha
0002A0r 1  A2 20        	ldx     #$20
0002A2r 1  A9 A3        	lda     #$A3
0002A4r 1  20 rr rr     	jsr     _one_vram_buffer
0002A7r 1               ;
0002A7r 1               ; one_vram_buffer(0x00, 0x20A4);
0002A7r 1               ;
0002A7r 1  A9 00        	lda     #$00
0002A9r 1  20 rr rr     	jsr     pusha
0002ACr 1  A2 20        	ldx     #$20
0002AEr 1  A9 A4        	lda     #$A4
0002B0r 1  20 rr rr     	jsr     _one_vram_buffer
0002B3r 1               ;
0002B3r 1               ; one_vram_buffer(0x00, 0x20A6);
0002B3r 1               ;
0002B3r 1  A9 00        	lda     #$00
0002B5r 1  20 rr rr     	jsr     pusha
0002B8r 1  A2 20        	ldx     #$20
0002BAr 1  A9 A6        	lda     #$A6
0002BCr 1  20 rr rr     	jsr     _one_vram_buffer
0002BFr 1               ;
0002BFr 1               ; one_vram_buffer(0x00, 0x20A7);
0002BFr 1               ;
0002BFr 1  A9 00        	lda     #$00
0002C1r 1  20 rr rr     	jsr     pusha
0002C4r 1  A2 20        	ldx     #$20
0002C6r 1  A9 A7        	lda     #$A7
0002C8r 1  20 rr rr     	jsr     _one_vram_buffer
0002CBr 1               ;
0002CBr 1               ; enemy_x=0;
0002CBr 1               ;
0002CBr 1  A2 00        	ldx     #$00
0002CDr 1  A9 00        	lda     #$00
0002CFr 1  85 rr        	sta     _enemy_x
0002D1r 1               ;
0002D1r 1               ; enemy_y=190;
0002D1r 1               ;
0002D1r 1  A2 00        	ldx     #$00
0002D3r 1  A9 BE        	lda     #$BE
0002D5r 1  85 rr        	sta     _enemy_y
0002D7r 1               ;
0002D7r 1               ; state=1;
0002D7r 1               ;
0002D7r 1  A2 00        	ldx     #$00
0002D9r 1  A9 01        	lda     #$01
0002DBr 1  85 rr        	sta     _state
0002DDr 1               ;
0002DDr 1               ; health=10;
0002DDr 1               ;
0002DDr 1  A2 00        	ldx     #$00
0002DFr 1  A9 0A        	lda     #$0A
0002E1r 1  8D rr rr     	sta     _health
0002E4r 1               ;
0002E4r 1               ; enemy_type=rand() % 3 + 0;
0002E4r 1               ;
0002E4r 1  20 rr rr     	jsr     _rand
0002E7r 1  20 rr rr     	jsr     pushax
0002EAr 1  A2 00        	ldx     #$00
0002ECr 1  A9 03        	lda     #$03
0002EEr 1  20 rr rr     	jsr     tosmodax
0002F1r 1  A2 00        	ldx     #$00
0002F3r 1  85 rr        	sta     _enemy_type
0002F5r 1               ;
0002F5r 1               ; if(enemy_type==0){
0002F5r 1               ;
0002F5r 1  A2 00        	ldx     #$00
0002F7r 1  A5 rr        	lda     _enemy_type
0002F9r 1  C9 00        	cmp     #$00
0002FBr 1  20 rr rr     	jsr     booleq
0002FEr 1  D0 03 4C rr  	jeq     L0015
000302r 1  rr           
000303r 1               ;
000303r 1               ; pal_col(0x3F14,0x0f);
000303r 1               ;
000303r 1  A9 14        	lda     #$14
000305r 1  20 rr rr     	jsr     pusha
000308r 1  A9 0F        	lda     #$0F
00030Ar 1  20 rr rr     	jsr     _pal_col
00030Dr 1               ;
00030Dr 1               ; pal_col(0x3F15,0x0f);
00030Dr 1               ;
00030Dr 1  A9 15        	lda     #$15
00030Fr 1  20 rr rr     	jsr     pusha
000312r 1  A9 0F        	lda     #$0F
000314r 1  20 rr rr     	jsr     _pal_col
000317r 1               ;
000317r 1               ; pal_col(0x3F16,0x27);
000317r 1               ;
000317r 1  A9 16        	lda     #$16
000319r 1  20 rr rr     	jsr     pusha
00031Cr 1  A9 27        	lda     #$27
00031Er 1  20 rr rr     	jsr     _pal_col
000321r 1               ;
000321r 1               ; pal_col(0x3F17,0x37);
000321r 1               ;
000321r 1  A9 17        	lda     #$17
000323r 1  20 rr rr     	jsr     pusha
000326r 1  A9 37        	lda     #$37
000328r 1  20 rr rr     	jsr     _pal_col
00032Br 1               ;
00032Br 1               ; if(enemy_type==1){
00032Br 1               ;
00032Br 1  A2 00        L0015:	ldx     #$00
00032Dr 1  A5 rr        	lda     _enemy_type
00032Fr 1  C9 01        	cmp     #$01
000331r 1  20 rr rr     	jsr     booleq
000334r 1  D0 03 4C rr  	jeq     L0016
000338r 1  rr           
000339r 1               ;
000339r 1               ; pal_col(0x3F14,0x22);
000339r 1               ;
000339r 1  A9 14        	lda     #$14
00033Br 1  20 rr rr     	jsr     pusha
00033Er 1  A9 22        	lda     #$22
000340r 1  20 rr rr     	jsr     _pal_col
000343r 1               ;
000343r 1               ; pal_col(0x3F15,0x01);
000343r 1               ;
000343r 1  A9 15        	lda     #$15
000345r 1  20 rr rr     	jsr     pusha
000348r 1  A9 01        	lda     #$01
00034Ar 1  20 rr rr     	jsr     _pal_col
00034Dr 1               ;
00034Dr 1               ; pal_col(0x3F16,0x21);
00034Dr 1               ;
00034Dr 1  A9 16        	lda     #$16
00034Fr 1  20 rr rr     	jsr     pusha
000352r 1  A9 21        	lda     #$21
000354r 1  20 rr rr     	jsr     _pal_col
000357r 1               ;
000357r 1               ; pal_col(0x3F17,0x31);
000357r 1               ;
000357r 1  A9 17        	lda     #$17
000359r 1  20 rr rr     	jsr     pusha
00035Cr 1  A9 31        	lda     #$31
00035Er 1  20 rr rr     	jsr     _pal_col
000361r 1               ;
000361r 1               ; if(enemy_type==2){
000361r 1               ;
000361r 1  A2 00        L0016:	ldx     #$00
000363r 1  A5 rr        	lda     _enemy_type
000365r 1  C9 02        	cmp     #$02
000367r 1  20 rr rr     	jsr     booleq
00036Ar 1  D0 03 4C rr  	jeq     L0017
00036Er 1  rr           
00036Fr 1               ;
00036Fr 1               ; floating_down=0;
00036Fr 1               ;
00036Fr 1  A2 00        	ldx     #$00
000371r 1  A9 00        	lda     #$00
000373r 1  8D rr rr     	sta     _floating_down
000376r 1               ;
000376r 1               ; pal_col(0x3F14,0x09);
000376r 1               ;
000376r 1  A9 14        	lda     #$14
000378r 1  20 rr rr     	jsr     pusha
00037Br 1  A9 09        	lda     #$09
00037Dr 1  20 rr rr     	jsr     _pal_col
000380r 1               ;
000380r 1               ; pal_col(0x3F15,0x19);
000380r 1               ;
000380r 1  A9 15        	lda     #$15
000382r 1  20 rr rr     	jsr     pusha
000385r 1  A9 19        	lda     #$19
000387r 1  20 rr rr     	jsr     _pal_col
00038Ar 1               ;
00038Ar 1               ; pal_col(0x3F16,0x29);
00038Ar 1               ;
00038Ar 1  A9 16        	lda     #$16
00038Cr 1  20 rr rr     	jsr     pusha
00038Fr 1  A9 29        	lda     #$29
000391r 1  20 rr rr     	jsr     _pal_col
000394r 1               ;
000394r 1               ; pal_col(0x3F17,0x39);
000394r 1               ;
000394r 1  A9 17        	lda     #$17
000396r 1  20 rr rr     	jsr     pusha
000399r 1  A9 39        	lda     #$39
00039Br 1  20 rr rr     	jsr     _pal_col
00039Er 1               ;
00039Er 1               ; set_scroll_x(0);
00039Er 1               ;
00039Er 1  A2 00        L0017:	ldx     #$00
0003A0r 1  A9 00        	lda     #$00
0003A2r 1  20 rr rr     	jsr     _set_scroll_x
0003A5r 1               ;
0003A5r 1               ; set_scroll_y(0);
0003A5r 1               ;
0003A5r 1  A2 00        	ldx     #$00
0003A7r 1  A9 00        	lda     #$00
0003A9r 1  20 rr rr     	jsr     _set_scroll_y
0003ACr 1               ;
0003ACr 1               ; if(state>0)split(scroll_x);
0003ACr 1               ;
0003ACr 1  A2 00        	ldx     #$00
0003AEr 1  A5 rr        	lda     _state
0003B0r 1  C9 00        	cmp     #$00
0003B2r 1  20 rr rr     	jsr     boolne
0003B5r 1  D0 03 4C rr  	jeq     L0018
0003B9r 1  rr           
0003BAr 1  A2 00        	ldx     #$00
0003BCr 1  A5 rr        	lda     _scroll_x
0003BEr 1  20 rr rr     	jsr     _split
0003C1r 1               ;
0003C1r 1               ; if((pad2_zapper)&&(zapper_ready)){
0003C1r 1               ;
0003C1r 1  A5 rr        L0018:	lda     _pad2_zapper
0003C3r 1  D0 03 4C rr  	jeq     L001A
0003C7r 1  rr           
0003C8r 1  A5 rr        	lda     _zapper_ready
0003CAr 1  F0 03 4C rr  	jne     L001B
0003CEr 1  rr           
0003CFr 1  A2 00        L001A:	ldx     #$00
0003D1r 1  A9 00        	lda     #$00
0003D3r 1  D0 03 4C rr  	jeq     L001C
0003D7r 1  rr           
0003D8r 1  A2 00        L001B:	ldx     #$00
0003DAr 1  A9 01        	lda     #$01
0003DCr 1  D0 03 4C rr  L001C:	jeq     L002D
0003E0r 1  rr           
0003E1r 1               ;
0003E1r 1               ; if((state!=2)&&(shoot>0)){
0003E1r 1               ;
0003E1r 1  A2 00        	ldx     #$00
0003E3r 1  A5 rr        	lda     _state
0003E5r 1  C9 02        	cmp     #$02
0003E7r 1  20 rr rr     	jsr     boolne
0003EAr 1  D0 03 4C rr  	jeq     L001E
0003EEr 1  rr           
0003EFr 1  A2 00        	ldx     #$00
0003F1r 1  AD rr rr     	lda     _shoot
0003F4r 1  C9 00        	cmp     #$00
0003F6r 1  20 rr rr     	jsr     boolne
0003F9r 1  F0 03 4C rr  	jne     L001F
0003FDr 1  rr           
0003FEr 1  A2 00        L001E:	ldx     #$00
000400r 1  A9 00        	lda     #$00
000402r 1  D0 03 4C rr  	jeq     L0020
000406r 1  rr           
000407r 1  A2 00        L001F:	ldx     #$00
000409r 1  A9 01        	lda     #$01
00040Br 1  D0 03 4C rr  L0020:	jeq     L0024
00040Fr 1  rr           
000410r 1               ;
000410r 1               ; shoot--;
000410r 1               ;
000410r 1  A2 00        	ldx     #$00
000412r 1  AD rr rr     	lda     _shoot
000415r 1  CE rr rr     	dec     _shoot
000418r 1               ;
000418r 1               ; if(shoot==0){
000418r 1               ;
000418r 1  A2 00        	ldx     #$00
00041Ar 1  AD rr rr     	lda     _shoot
00041Dr 1  C9 00        	cmp     #$00
00041Fr 1  20 rr rr     	jsr     booleq
000422r 1  D0 03 4C rr  	jeq     L0021
000426r 1  rr           
000427r 1               ;
000427r 1               ; timer0=60;
000427r 1               ;
000427r 1  A2 00        	ldx     #$00
000429r 1  A9 3C        	lda     #$3C
00042Br 1  8D rr rr     	sta     _timer0
00042Er 1               ;
00042Er 1               ; famistudio_sfx_play(0, FAMISTUDIO_SFX_CH0);
00042Er 1               ;
00042Er 1  A9 00        L0021:	lda     #$00
000430r 1  20 rr rr     	jsr     pusha
000433r 1  A9 00        	lda     #$00
000435r 1  20 rr rr     	jsr     _famistudio_sfx_play
000438r 1               ;
000438r 1               ; pal_col(0x3F13,0x0F);
000438r 1               ;
000438r 1  A9 13        	lda     #$13
00043Ar 1  20 rr rr     	jsr     pusha
00043Dr 1  A9 0F        	lda     #$0F
00043Fr 1  20 rr rr     	jsr     _pal_col
000442r 1               ;
000442r 1               ; pal_col(0x3F00,0x0F);
000442r 1               ;
000442r 1  A9 00        	lda     #$00
000444r 1  20 rr rr     	jsr     pusha
000447r 1  A9 0F        	lda     #$0F
000449r 1  20 rr rr     	jsr     _pal_col
00044Cr 1               ;
00044Cr 1               ; pal_col(0x3F10,0x0F);
00044Cr 1               ;
00044Cr 1  A9 10        	lda     #$10
00044Er 1  20 rr rr     	jsr     pusha
000451r 1  A9 0F        	lda     #$0F
000453r 1  20 rr rr     	jsr     _pal_col
000456r 1               ;
000456r 1               ; oam_clear();
000456r 1               ;
000456r 1  20 rr rr     	jsr     _oam_clear
000459r 1               ;
000459r 1               ; oam_set(0);
000459r 1               ;
000459r 1  A9 00        	lda     #$00
00045Br 1  20 rr rr     	jsr     _oam_set
00045Er 1               ;
00045Er 1               ; oam_spr(256-8,25*8,0xff,0);
00045Er 1               ;
00045Er 1  A9 F8        	lda     #$F8
000460r 1  20 rr rr     	jsr     pusha
000463r 1  A9 C8        	lda     #$C8
000465r 1  20 rr rr     	jsr     pusha
000468r 1  A9 FF        	lda     #$FF
00046Ar 1  20 rr rr     	jsr     pusha
00046Dr 1  A9 00        	lda     #$00
00046Fr 1  20 rr rr     	jsr     _oam_spr
000472r 1               ;
000472r 1               ; if(state==0)draw_title_box();
000472r 1               ;
000472r 1  A2 00        	ldx     #$00
000474r 1  A5 rr        	lda     _state
000476r 1  C9 00        	cmp     #$00
000478r 1  20 rr rr     	jsr     booleq
00047Br 1  D0 03 4C rr  	jeq     L0022
00047Fr 1  rr           
000480r 1  20 rr rr     	jsr     _draw_title_box
000483r 1               ;
000483r 1               ; if(state==1)draw_enemy_box();
000483r 1               ;
000483r 1  A2 00        L0022:	ldx     #$00
000485r 1  A5 rr        	lda     _state
000487r 1  C9 01        	cmp     #$01
000489r 1  20 rr rr     	jsr     booleq
00048Cr 1  D0 03 4C rr  	jeq     L0023
000490r 1  rr           
000491r 1  20 rr rr     	jsr     _draw_enemy_box
000494r 1               ;
000494r 1               ; ppu_mask(0x16); // BG off, won't happen till NEXT frame
000494r 1               ;
000494r 1  A9 16        L0023:	lda     #$16
000496r 1  20 rr rr     	jsr     _ppu_mask
000499r 1               ;
000499r 1               ; ppu_wait_nmi(); // wait till the top of the next frame
000499r 1               ;
000499r 1  20 rr rr     	jsr     _ppu_wait_nmi
00049Cr 1               ;
00049Cr 1               ; oam_clear(); // clear the NEXT frame
00049Cr 1               ;
00049Cr 1  20 rr rr     	jsr     _oam_clear
00049Fr 1               ;
00049Fr 1               ; oam_set(0);
00049Fr 1               ;
00049Fr 1  A9 00        	lda     #$00
0004A1r 1  20 rr rr     	jsr     _oam_set
0004A4r 1               ;
0004A4r 1               ; oam_spr(256-8,21*8,0xff,0);
0004A4r 1               ;
0004A4r 1  A9 F8        	lda     #$F8
0004A6r 1  20 rr rr     	jsr     pusha
0004A9r 1  A9 A8        	lda     #$A8
0004ABr 1  20 rr rr     	jsr     pusha
0004AEr 1  A9 FF        	lda     #$FF
0004B0r 1  20 rr rr     	jsr     pusha
0004B3r 1  A9 00        	lda     #$00
0004B5r 1  20 rr rr     	jsr     _oam_spr
0004B8r 1               ;
0004B8r 1               ; if(state==1){
0004B8r 1               ;
0004B8r 1  A2 00        	ldx     #$00
0004BAr 1  A5 rr        	lda     _state
0004BCr 1  C9 01        	cmp     #$01
0004BEr 1  20 rr rr     	jsr     booleq
0004C1r 1  D0 03 4C rr  	jeq     L0024
0004C5r 1  rr           
0004C6r 1               ;
0004C6r 1               ; draw_enemy();
0004C6r 1               ;
0004C6r 1  20 rr rr     	jsr     _draw_enemy
0004C9r 1               ;
0004C9r 1               ; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
0004C9r 1               ;
0004C9r 1  A9 1E        L0024:	lda     #$1E
0004CBr 1  20 rr rr     	jsr     _ppu_mask
0004CEr 1               ;
0004CEr 1               ; if(state==1){
0004CEr 1               ;
0004CEr 1  A2 00        	ldx     #$00
0004D0r 1  A5 rr        	lda     _state
0004D2r 1  C9 01        	cmp     #$01
0004D4r 1  20 rr rr     	jsr     booleq
0004D7r 1  D0 03 4C rr  	jeq     L0025
0004DBr 1  rr           
0004DCr 1               ;
0004DCr 1               ; pal_col(0x3F00,0x22);
0004DCr 1               ;
0004DCr 1  A9 00        	lda     #$00
0004DEr 1  20 rr rr     	jsr     pusha
0004E1r 1  A9 22        	lda     #$22
0004E3r 1  20 rr rr     	jsr     _pal_col
0004E6r 1               ;
0004E6r 1               ; pal_col(0x3F10,0x22);
0004E6r 1               ;
0004E6r 1  A9 10        	lda     #$10
0004E8r 1  20 rr rr     	jsr     pusha
0004EBr 1  A9 22        	lda     #$22
0004EDr 1  20 rr rr     	jsr     _pal_col
0004F0r 1               ;
0004F0r 1               ; pal_col(0x3F13,0x22);
0004F0r 1               ;
0004F0r 1  A9 13        	lda     #$13
0004F2r 1  20 rr rr     	jsr     pusha
0004F5r 1  A9 22        	lda     #$22
0004F7r 1  20 rr rr     	jsr     _pal_col
0004FAr 1               ;
0004FAr 1               ; hit_detected = zap_read(1); // look for light in zapper, port 2
0004FAr 1               ;
0004FAr 1  A9 01        L0025:	lda     #$01
0004FCr 1  20 rr rr     	jsr     _zap_read
0004FFr 1  85 rr        	sta     _hit_detected
000501r 1               ;
000501r 1               ; if((hit_detected)&&(shoot>0)){
000501r 1               ;
000501r 1  A5 rr        	lda     _hit_detected
000503r 1  D0 03 4C rr  	jeq     L0027
000507r 1  rr           
000508r 1  A2 00        	ldx     #$00
00050Ar 1  AD rr rr     	lda     _shoot
00050Dr 1  C9 00        	cmp     #$00
00050Fr 1  20 rr rr     	jsr     boolne
000512r 1  F0 03 4C rr  	jne     L0028
000516r 1  rr           
000517r 1  A2 00        L0027:	ldx     #$00
000519r 1  A9 00        	lda     #$00
00051Br 1  D0 03 4C rr  	jeq     L0029
00051Fr 1  rr           
000520r 1  A2 00        L0028:	ldx     #$00
000522r 1  A9 01        	lda     #$01
000524r 1  D0 03 4C rr  L0029:	jeq     L002D
000528r 1  rr           
000529r 1               ;
000529r 1               ; if(state==1){
000529r 1               ;
000529r 1  A2 00        	ldx     #$00
00052Br 1  A5 rr        	lda     _state
00052Dr 1  C9 01        	cmp     #$01
00052Fr 1  20 rr rr     	jsr     booleq
000532r 1  D0 03 4C rr  	jeq     L002B
000536r 1  rr           
000537r 1               ;
000537r 1               ; health--;
000537r 1               ;
000537r 1  A2 00        	ldx     #$00
000539r 1  AD rr rr     	lda     _health
00053Cr 1  CE rr rr     	dec     _health
00053Fr 1               ;
00053Fr 1               ; if((health==0)){
00053Fr 1               ;
00053Fr 1  A2 00        	ldx     #$00
000541r 1  AD rr rr     	lda     _health
000544r 1  C9 00        	cmp     #$00
000546r 1  20 rr rr     	jsr     booleq
000549r 1  D0 03 4C rr  	jeq     L002B
00054Dr 1  rr           
00054Er 1               ;
00054Er 1               ; state=2;
00054Er 1               ;
00054Er 1  A2 00        	ldx     #$00
000550r 1  A9 02        	lda     #$02
000552r 1  85 rr        	sta     _state
000554r 1               ;
000554r 1               ; timer=60;
000554r 1               ;
000554r 1  A2 00        	ldx     #$00
000556r 1  A9 3C        	lda     #$3C
000558r 1  8D rr rr     	sta     _timer
00055Br 1               ;
00055Br 1               ; score0++;
00055Br 1               ;
00055Br 1  A2 00        	ldx     #$00
00055Dr 1  AD rr rr     	lda     _score0
000560r 1  EE rr rr     	inc     _score0
000563r 1               ;
000563r 1               ; if(score0==10){
000563r 1               ;
000563r 1  A2 00        	ldx     #$00
000565r 1  AD rr rr     	lda     _score0
000568r 1  C9 0A        	cmp     #$0A
00056Ar 1  20 rr rr     	jsr     booleq
00056Dr 1  D0 03 4C rr  	jeq     L002C
000571r 1  rr           
000572r 1               ;
000572r 1               ; score0 = 0;
000572r 1               ;
000572r 1  A2 00        	ldx     #$00
000574r 1  A9 00        	lda     #$00
000576r 1  8D rr rr     	sta     _score0
000579r 1               ;
000579r 1               ; score1++;
000579r 1               ;
000579r 1  A2 00        	ldx     #$00
00057Br 1  AD rr rr     	lda     _score1
00057Er 1  EE rr rr     	inc     _score1
000581r 1               ;
000581r 1               ; one_vram_buffer(0x16, 0x20A0);
000581r 1               ;
000581r 1  A9 16        L002C:	lda     #$16
000583r 1  20 rr rr     	jsr     pusha
000586r 1  A2 20        	ldx     #$20
000588r 1  A9 A0        	lda     #$A0
00058Ar 1  20 rr rr     	jsr     _one_vram_buffer
00058Dr 1               ;
00058Dr 1               ; one_vram_buffer(0x06, 0x20A1);
00058Dr 1               ;
00058Dr 1  A9 06        	lda     #$06
00058Fr 1  20 rr rr     	jsr     pusha
000592r 1  A2 20        	ldx     #$20
000594r 1  A9 A1        	lda     #$A1
000596r 1  20 rr rr     	jsr     _one_vram_buffer
000599r 1               ;
000599r 1               ; one_vram_buffer(0x12, 0x20A2);
000599r 1               ;
000599r 1  A9 12        	lda     #$12
00059Br 1  20 rr rr     	jsr     pusha
00059Er 1  A2 20        	ldx     #$20
0005A0r 1  A9 A2        	lda     #$A2
0005A2r 1  20 rr rr     	jsr     _one_vram_buffer
0005A5r 1               ;
0005A5r 1               ; one_vram_buffer(0x15, 0x20A3);
0005A5r 1               ;
0005A5r 1  A9 15        	lda     #$15
0005A7r 1  20 rr rr     	jsr     pusha
0005AAr 1  A2 20        	ldx     #$20
0005ACr 1  A9 A3        	lda     #$A3
0005AEr 1  20 rr rr     	jsr     _one_vram_buffer
0005B1r 1               ;
0005B1r 1               ; one_vram_buffer(0x08, 0x20A4);
0005B1r 1               ;
0005B1r 1  A9 08        	lda     #$08
0005B3r 1  20 rr rr     	jsr     pusha
0005B6r 1  A2 20        	ldx     #$20
0005B8r 1  A9 A4        	lda     #$A4
0005BAr 1  20 rr rr     	jsr     _one_vram_buffer
0005BDr 1               ;
0005BDr 1               ; temp1=score1+0x1E;
0005BDr 1               ;
0005BDr 1  A2 00        	ldx     #$00
0005BFr 1  AD rr rr     	lda     _score1
0005C2r 1  A0 1E        	ldy     #$1E
0005C4r 1  20 rr rr     	jsr     incaxy
0005C7r 1  A2 00        	ldx     #$00
0005C9r 1  85 rr        	sta     _temp1
0005CBr 1               ;
0005CBr 1               ; temp2=score0+0x1E;
0005CBr 1               ;
0005CBr 1  A2 00        	ldx     #$00
0005CDr 1  AD rr rr     	lda     _score0
0005D0r 1  A0 1E        	ldy     #$1E
0005D2r 1  20 rr rr     	jsr     incaxy
0005D5r 1  A2 00        	ldx     #$00
0005D7r 1  85 rr        	sta     _temp2
0005D9r 1               ;
0005D9r 1               ; one_vram_buffer(temp1, 0x20A6);
0005D9r 1               ;
0005D9r 1  A5 rr        	lda     _temp1
0005DBr 1  20 rr rr     	jsr     pusha
0005DEr 1  A2 20        	ldx     #$20
0005E0r 1  A9 A6        	lda     #$A6
0005E2r 1  20 rr rr     	jsr     _one_vram_buffer
0005E5r 1               ;
0005E5r 1               ; one_vram_buffer(temp2, 0x20A7);
0005E5r 1               ;
0005E5r 1  A5 rr        	lda     _temp2
0005E7r 1  20 rr rr     	jsr     pusha
0005EAr 1  A2 20        	ldx     #$20
0005ECr 1  A9 A7        	lda     #$A7
0005EEr 1  20 rr rr     	jsr     _one_vram_buffer
0005F1r 1               ;
0005F1r 1               ; if(state==0){
0005F1r 1               ;
0005F1r 1  A2 00        L002B:	ldx     #$00
0005F3r 1  A5 rr        	lda     _state
0005F5r 1  C9 00        	cmp     #$00
0005F7r 1  20 rr rr     	jsr     booleq
0005FAr 1  D0 03 4C rr  	jeq     L002D
0005FEr 1  rr           
0005FFr 1               ;
0005FFr 1               ; famistudio_music_play(1);
0005FFr 1               ;
0005FFr 1  A9 01        	lda     #$01
000601r 1  20 rr rr     	jsr     _famistudio_music_play
000604r 1               ;
000604r 1               ; state=2;
000604r 1               ;
000604r 1  A2 00        	ldx     #$00
000606r 1  A9 02        	lda     #$02
000608r 1  85 rr        	sta     _state
00060Ar 1               ;
00060Ar 1               ; timer=60;
00060Ar 1               ;
00060Ar 1  A2 00        	ldx     #$00
00060Cr 1  A9 3C        	lda     #$3C
00060Er 1  8D rr rr     	sta     _timer
000611r 1               ;
000611r 1               ; ppu_off();
000611r 1               ;
000611r 1  20 rr rr     	jsr     _ppu_off
000614r 1               ;
000614r 1               ; vram_adr(NAMETABLE_A);
000614r 1               ;
000614r 1  A2 20        	ldx     #$20
000616r 1  A9 00        	lda     #$00
000618r 1  20 rr rr     	jsr     _vram_adr
00061Br 1               ;
00061Br 1               ; vram_unrle(sands);
00061Br 1               ;
00061Br 1  A9 rr        	lda     #<(_sands)
00061Dr 1  A2 rr        	ldx     #>(_sands)
00061Fr 1  20 rr rr     	jsr     _vram_unrle
000622r 1               ;
000622r 1               ; pal_col(0x3F00,0x22);
000622r 1               ;
000622r 1  A9 00        	lda     #$00
000624r 1  20 rr rr     	jsr     pusha
000627r 1  A9 22        	lda     #$22
000629r 1  20 rr rr     	jsr     _pal_col
00062Cr 1               ;
00062Cr 1               ; pal_col(0x3F10,0x22);
00062Cr 1               ;
00062Cr 1  A9 10        	lda     #$10
00062Er 1  20 rr rr     	jsr     pusha
000631r 1  A9 22        	lda     #$22
000633r 1  20 rr rr     	jsr     _pal_col
000636r 1               ;
000636r 1               ; pal_col(0x3F13,0x22);
000636r 1               ;
000636r 1  A9 13        	lda     #$13
000638r 1  20 rr rr     	jsr     pusha
00063Br 1  A9 22        	lda     #$22
00063Dr 1  20 rr rr     	jsr     _pal_col
000640r 1               ;
000640r 1               ; ppu_on_all();
000640r 1               ;
000640r 1  20 rr rr     	jsr     _ppu_on_all
000643r 1               ;
000643r 1               ; while (1){
000643r 1               ;
000643r 1  4C rr rr     L002D:	jmp     L0002
000646r 1               ;
000646r 1               ; }
000646r 1               ;
000646r 1  60           	rts
000647r 1               
000647r 1               .endproc
000647r 1               
000647r 1               
