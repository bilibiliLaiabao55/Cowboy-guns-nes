ca65 V2.19 - Git 216bb22
Main file   : build/CowboyGuns.s
Current file: build/CowboyGuns.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 216bb22
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_rand
000000r 1               	.import		_pal_all
000000r 1               	.import		_pal_col
000000r 1               	.import		_ppu_wait_nmi
000000r 1               	.import		_ppu_off
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_ppu_mask
000000r 1               	.import		_oam_clear
000000r 1               	.import		_oam_meta_spr
000000r 1               	.import		_music_play
000000r 1               	.import		_sfx_play
000000r 1               	.import		_bank_bg
000000r 1               	.import		_vram_adr
000000r 1               	.import		_vram_put
000000r 1               	.import		_vram_unrle
000000r 1               	.import		_set_vram_buffer
000000r 1               	.import		_set_scroll_x
000000r 1               	.import		_zap_shoot
000000r 1               	.import		_zap_read
000000r 1               	.export		_sands
000000r 1               	.export		_title
000000r 1               	.export		_boxes_0_data
000000r 1               	.export		_boxes_1_data
000000r 1               	.export		_boxes_list
000000r 1               	.export		_enemy_0_data
000000r 1               	.export		_enemy_1_data
000000r 1               	.export		_enemy_list
000000r 1               	.export		_pad2_zapper
000000r 1               	.export		_zapper_ready
000000r 1               	.export		_hit_detected
000000r 1               	.export		_temp1
000000r 1               	.export		_temp2
000000r 1               	.export		_state
000000r 1               	.export		_scroll_x
000000r 1               	.export		_enemy_x
000000r 1               	.export		_enemy_y
000000r 1               	.export		_enemy_type
000000r 1               	.export		_enemy_frame
000000r 1               	.export		_health
000000r 1               	.export		_enemy_up_speed
000000r 1               	.export		_timer
000000r 1               	.export		_timer0
000000r 1               	.export		_shoot
000000r 1               	.export		_floating_down
000000r 1               	.export		_score0
000000r 1               	.export		_score1
000000r 1               	.export		_pal
000000r 1               	.export		_draw_title_box
000000r 1               	.export		_draw_enemy_box
000000r 1               	.export		_draw_enemy
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _health:
000000r 1  0A           	.byte	$0A
000001r 1               _enemy_up_speed:
000001r 1  0A           	.byte	$0A
000002r 1               _timer:
000002r 1  00           	.byte	$00
000003r 1               _timer0:
000003r 1  00           	.byte	$00
000004r 1               _shoot:
000004r 1  05           	.byte	$05
000005r 1               _floating_down:
000005r 1  00           	.byte	$00
000006r 1               _score0:
000006r 1  00           	.byte	$00
000007r 1               _score1:
000007r 1  00           	.byte	$00
000008r 1               
000008r 1               .segment	"RODATA"
000000r 1               
000000r 1               _sands:
000000r 1  03           	.byte	$03
000001r 1  00           	.byte	$00
000002r 1  30           	.byte	$30
000003r 1  01           	.byte	$01
000004r 1  31           	.byte	$31
000005r 1  00           	.byte	$00
000006r 1  03           	.byte	$03
000007r 1  06           	.byte	$06
000008r 1  30           	.byte	$30
000009r 1  01           	.byte	$01
00000Ar 1  01           	.byte	$01
00000Br 1  31           	.byte	$31
00000Cr 1  00           	.byte	$00
00000Dr 1  03           	.byte	$03
00000Er 1  10           	.byte	$10
00000Fr 1  30           	.byte	$30
000010r 1  01           	.byte	$01
000011r 1  03           	.byte	$03
000012r 1  02           	.byte	$02
000013r 1  31           	.byte	$31
000014r 1  00           	.byte	$00
000015r 1  03           	.byte	$03
000016r 1  04           	.byte	$04
000017r 1  30           	.byte	$30
000018r 1  01           	.byte	$01
000019r 1  03           	.byte	$03
00001Ar 1  03           	.byte	$03
00001Br 1  31           	.byte	$31
00001Cr 1  00           	.byte	$00
00001Dr 1  03           	.byte	$03
00001Er 1  07           	.byte	$07
00001Fr 1  30           	.byte	$30
000020r 1  01           	.byte	$01
000021r 1  01           	.byte	$01
000022r 1  31           	.byte	$31
000023r 1  00           	.byte	$00
000024r 1  03           	.byte	$03
000025r 1  03           	.byte	$03
000026r 1  32           	.byte	$32
000027r 1  01           	.byte	$01
000028r 1  03           	.byte	$03
000029r 1  03           	.byte	$03
00002Ar 1  31           	.byte	$31
00002Br 1  00           	.byte	$00
00002Cr 1  03           	.byte	$03
00002Dr 1  02           	.byte	$02
00002Er 1  30           	.byte	$30
00002Fr 1  01           	.byte	$01
000030r 1  03           	.byte	$03
000031r 1  05           	.byte	$05
000032r 1  31           	.byte	$31
000033r 1  00           	.byte	$00
000034r 1  03           	.byte	$03
000035r 1  05           	.byte	$05
000036r 1  30           	.byte	$30
000037r 1  01           	.byte	$01
000038r 1  03           	.byte	$03
000039r 1  04           	.byte	$04
00003Ar 1  31           	.byte	$31
00003Br 1  00           	.byte	$00
00003Cr 1  03           	.byte	$03
00003Dr 1  02           	.byte	$02
00003Er 1  32           	.byte	$32
00003Fr 1  01           	.byte	$01
000040r 1  03           	.byte	$03
000041r 1  02           	.byte	$02
000042r 1  33           	.byte	$33
000043r 1  00           	.byte	$00
000044r 1  03           	.byte	$03
000045r 1  02           	.byte	$02
000046r 1  32           	.byte	$32
000047r 1  01           	.byte	$01
000048r 1  03           	.byte	$03
000049r 1  06           	.byte	$06
00004Ar 1  31           	.byte	$31
00004Br 1  00           	.byte	$00
00004Cr 1  03           	.byte	$03
00004Dr 1  03           	.byte	$03
00004Er 1  30           	.byte	$30
00004Fr 1  01           	.byte	$01
000050r 1  03           	.byte	$03
000051r 1  06           	.byte	$06
000052r 1  31           	.byte	$31
000053r 1  00           	.byte	$00
000054r 1  03           	.byte	$03
000055r 1  0A           	.byte	$0A
000056r 1  32           	.byte	$32
000057r 1  01           	.byte	$01
000058r 1  03           	.byte	$03
000059r 1  05           	.byte	$05
00005Ar 1  33           	.byte	$33
00005Br 1  00           	.byte	$00
00005Cr 1  03           	.byte	$03
00005Dr 1  03           	.byte	$03
00005Er 1  01           	.byte	$01
00005Fr 1  03           	.byte	$03
000060r 1  07           	.byte	$07
000061r 1  33           	.byte	$33
000062r 1  00           	.byte	$00
000063r 1  03           	.byte	$03
000064r 1  16           	.byte	$16
000065r 1  32           	.byte	$32
000066r 1  01           	.byte	$01
000067r 1  03           	.byte	$03
000068r 1  05           	.byte	$05
000069r 1  33           	.byte	$33
00006Ar 1  00           	.byte	$00
00006Br 1  03           	.byte	$03
00006Cr 1  FE           	.byte	$FE
00006Dr 1  00           	.byte	$00
00006Er 1  03           	.byte	$03
00006Fr 1  FE           	.byte	$FE
000070r 1  00           	.byte	$00
000071r 1  03           	.byte	$03
000072r 1  83           	.byte	$83
000073r 1  29           	.byte	$29
000074r 1  2A           	.byte	$2A
000075r 1  2B           	.byte	$2B
000076r 1  2C           	.byte	$2C
000077r 1  29           	.byte	$29
000078r 1  2A           	.byte	$2A
000079r 1  2B           	.byte	$2B
00007Ar 1  2C           	.byte	$2C
00007Br 1  29           	.byte	$29
00007Cr 1  2A           	.byte	$2A
00007Dr 1  2B           	.byte	$2B
00007Er 1  2C           	.byte	$2C
00007Fr 1  29           	.byte	$29
000080r 1  2A           	.byte	$2A
000081r 1  2B           	.byte	$2B
000082r 1  2C           	.byte	$2C
000083r 1  29           	.byte	$29
000084r 1  2A           	.byte	$2A
000085r 1  2B           	.byte	$2B
000086r 1  2C           	.byte	$2C
000087r 1  29           	.byte	$29
000088r 1  2A           	.byte	$2A
000089r 1  2B           	.byte	$2B
00008Ar 1  2C           	.byte	$2C
00008Br 1  29           	.byte	$29
00008Cr 1  2A           	.byte	$2A
00008Dr 1  2B           	.byte	$2B
00008Er 1  2C           	.byte	$2C
00008Fr 1  29           	.byte	$29
000090r 1  2A           	.byte	$2A
000091r 1  2B           	.byte	$2B
000092r 1  2C           	.byte	$2C
000093r 1  2D           	.byte	$2D
000094r 1  03           	.byte	$03
000095r 1  5F           	.byte	$5F
000096r 1  AA           	.byte	$AA
000097r 1  22           	.byte	$22
000098r 1  A8           	.byte	$A8
000099r 1  AA           	.byte	$AA
00009Ar 1  20           	.byte	$20
00009Br 1  80           	.byte	$80
00009Cr 1  AA           	.byte	$AA
00009Dr 1  A0           	.byte	$A0
00009Er 1  00           	.byte	$00
00009Fr 1  00           	.byte	$00
0000A0r 1  08           	.byte	$08
0000A1r 1  0A           	.byte	$0A
0000A2r 1  02           	.byte	$02
0000A3r 1  08           	.byte	$08
0000A4r 1  0A           	.byte	$0A
0000A5r 1  0A           	.byte	$0A
0000A6r 1  00           	.byte	$00
0000A7r 1  03           	.byte	$03
0000A8r 1  1F           	.byte	$1F
0000A9r 1  50           	.byte	$50
0000AAr 1  03           	.byte	$03
0000ABr 1  07           	.byte	$07
0000ACr 1  05           	.byte	$05
0000ADr 1  03           	.byte	$03
0000AEr 1  06           	.byte	$06
0000AFr 1  05           	.byte	$05
0000B0r 1  03           	.byte	$03
0000B1r 1  00           	.byte	$00
0000B2r 1               _title:
0000B2r 1  03           	.byte	$03
0000B3r 1  00           	.byte	$00
0000B4r 1  03           	.byte	$03
0000B5r 1  0B           	.byte	$0B
0000B6r 1  01           	.byte	$01
0000B7r 1  02           	.byte	$02
0000B8r 1  00           	.byte	$00
0000B9r 1  03           	.byte	$03
0000BAr 1  03           	.byte	$03
0000BBr 1  01           	.byte	$01
0000BCr 1  02           	.byte	$02
0000BDr 1  00           	.byte	$00
0000BEr 1  03           	.byte	$03
0000BFr 1  17           	.byte	$17
0000C0r 1  01           	.byte	$01
0000C1r 1  02           	.byte	$02
0000C2r 1  00           	.byte	$00
0000C3r 1  03           	.byte	$03
0000C4r 1  03           	.byte	$03
0000C5r 1  01           	.byte	$01
0000C6r 1  02           	.byte	$02
0000C7r 1  00           	.byte	$00
0000C8r 1  03           	.byte	$03
0000C9r 1  17           	.byte	$17
0000CAr 1  01           	.byte	$01
0000CBr 1  02           	.byte	$02
0000CCr 1  00           	.byte	$00
0000CDr 1  03           	.byte	$03
0000CEr 1  03           	.byte	$03
0000CFr 1  01           	.byte	$01
0000D0r 1  02           	.byte	$02
0000D1r 1  00           	.byte	$00
0000D2r 1  03           	.byte	$03
0000D3r 1  02           	.byte	$02
0000D4r 1  16           	.byte	$16
0000D5r 1  0B           	.byte	$0B
0000D6r 1  12           	.byte	$12
0000D7r 1  12           	.byte	$12
0000D8r 1  17           	.byte	$17
0000D9r 1  00           	.byte	$00
0000DAr 1  03           	.byte	$03
0000DBr 1  0F           	.byte	$0F
0000DCr 1  01           	.byte	$01
0000DDr 1  02           	.byte	$02
0000DEr 1  00           	.byte	$00
0000DFr 1  03           	.byte	$03
0000E0r 1  03           	.byte	$03
0000E1r 1  01           	.byte	$01
0000E2r 1  02           	.byte	$02
0000E3r 1  00           	.byte	$00
0000E4r 1  03           	.byte	$03
0000E5r 1  07           	.byte	$07
0000E6r 1  17           	.byte	$17
0000E7r 1  0B           	.byte	$0B
0000E8r 1  0C           	.byte	$0C
0000E9r 1  16           	.byte	$16
0000EAr 1  00           	.byte	$00
0000EBr 1  03           	.byte	$03
0000ECr 1  0B           	.byte	$0B
0000EDr 1  01           	.byte	$01
0000EEr 1  02           	.byte	$02
0000EFr 1  00           	.byte	$00
0000F0r 1  03           	.byte	$03
0000F1r 1  03           	.byte	$03
0000F2r 1  01           	.byte	$01
0000F3r 1  02           	.byte	$02
0000F4r 1  00           	.byte	$00
0000F5r 1  03           	.byte	$03
0000F6r 1  05           	.byte	$05
0000F7r 1  28           	.byte	$28
0000F8r 1  00           	.byte	$00
0000F9r 1  03           	.byte	$03
0000FAr 1  10           	.byte	$10
0000FBr 1  01           	.byte	$01
0000FCr 1  02           	.byte	$02
0000FDr 1  00           	.byte	$00
0000FEr 1  03           	.byte	$03
0000FFr 1  03           	.byte	$03
000100r 1  01           	.byte	$01
000101r 1  02           	.byte	$02
000102r 1  00           	.byte	$00
000103r 1  03           	.byte	$03
000104r 1  06           	.byte	$06
000105r 1  28           	.byte	$28
000106r 1  00           	.byte	$00
000107r 1  03           	.byte	$03
000108r 1  0E           	.byte	$0E
000109r 1  01           	.byte	$01
00010Ar 1  03           	.byte	$03
00010Br 1  09           	.byte	$09
00010Cr 1  00           	.byte	$00
00010Dr 1  03           	.byte	$03
00010Er 1  06           	.byte	$06
00010Fr 1  28           	.byte	$28
000110r 1  00           	.byte	$00
000111r 1  03           	.byte	$03
000112r 1  0B           	.byte	$0B
000113r 1  01           	.byte	$01
000114r 1  02           	.byte	$02
000115r 1  02           	.byte	$02
000116r 1  01           	.byte	$01
000117r 1  03           	.byte	$03
000118r 1  02           	.byte	$02
000119r 1  02           	.byte	$02
00011Ar 1  01           	.byte	$01
00011Br 1  01           	.byte	$01
00011Cr 1  02           	.byte	$02
00011Dr 1  03           	.byte	$03
00011Er 1  02           	.byte	$02
00011Fr 1  01           	.byte	$01
000120r 1  01           	.byte	$01
000121r 1  00           	.byte	$00
000122r 1  03           	.byte	$03
000123r 1  0F           	.byte	$0F
000124r 1  01           	.byte	$01
000125r 1  03           	.byte	$03
000126r 1  02           	.byte	$02
000127r 1  02           	.byte	$02
000128r 1  01           	.byte	$01
000129r 1  02           	.byte	$02
00012Ar 1  01           	.byte	$01
00012Br 1  02           	.byte	$02
00012Cr 1  01           	.byte	$01
00012Dr 1  02           	.byte	$02
00012Er 1  01           	.byte	$01
00012Fr 1  02           	.byte	$02
000130r 1  01           	.byte	$01
000131r 1  02           	.byte	$02
000132r 1  01           	.byte	$01
000133r 1  03           	.byte	$03
000134r 1  03           	.byte	$03
000135r 1  00           	.byte	$00
000136r 1  03           	.byte	$03
000137r 1  0D           	.byte	$0D
000138r 1  01           	.byte	$01
000139r 1  03           	.byte	$03
00013Ar 1  02           	.byte	$02
00013Br 1  02           	.byte	$02
00013Cr 1  02           	.byte	$02
00013Dr 1  01           	.byte	$01
00013Er 1  01           	.byte	$01
00013Fr 1  02           	.byte	$02
000140r 1  03           	.byte	$03
000141r 1  02           	.byte	$02
000142r 1  01           	.byte	$01
000143r 1  02           	.byte	$02
000144r 1  02           	.byte	$02
000145r 1  01           	.byte	$01
000146r 1  03           	.byte	$03
000147r 1  04           	.byte	$04
000148r 1  00           	.byte	$00
000149r 1  03           	.byte	$03
00014Ar 1  0D           	.byte	$0D
00014Br 1  01           	.byte	$01
00014Cr 1  03           	.byte	$03
00014Dr 1  02           	.byte	$02
00014Er 1  02           	.byte	$02
00014Fr 1  01           	.byte	$01
000150r 1  02           	.byte	$02
000151r 1  01           	.byte	$01
000152r 1  02           	.byte	$02
000153r 1  01           	.byte	$01
000154r 1  02           	.byte	$02
000155r 1  01           	.byte	$01
000156r 1  02           	.byte	$02
000157r 1  01           	.byte	$01
000158r 1  02           	.byte	$02
000159r 1  01           	.byte	$01
00015Ar 1  03           	.byte	$03
00015Br 1  03           	.byte	$03
00015Cr 1  00           	.byte	$00
00015Dr 1  03           	.byte	$03
00015Er 1  0F           	.byte	$0F
00015Fr 1  01           	.byte	$01
000160r 1  02           	.byte	$02
000161r 1  02           	.byte	$02
000162r 1  01           	.byte	$01
000163r 1  01           	.byte	$01
000164r 1  02           	.byte	$02
000165r 1  01           	.byte	$01
000166r 1  02           	.byte	$02
000167r 1  01           	.byte	$01
000168r 1  02           	.byte	$02
000169r 1  01           	.byte	$01
00016Ar 1  02           	.byte	$02
00016Br 1  01           	.byte	$01
00016Cr 1  01           	.byte	$01
00016Dr 1  00           	.byte	$00
00016Er 1  03           	.byte	$03
00016Fr 1  12           	.byte	$12
000170r 1  01           	.byte	$01
000171r 1  03           	.byte	$03
000172r 1  0B           	.byte	$0B
000173r 1  00           	.byte	$00
000174r 1  03           	.byte	$03
000175r 1  14           	.byte	$14
000176r 1  01           	.byte	$01
000177r 1  03           	.byte	$03
000178r 1  09           	.byte	$09
000179r 1  00           	.byte	$00
00017Ar 1  03           	.byte	$03
00017Br 1  2D           	.byte	$2D
00017Cr 1  01           	.byte	$01
00017Dr 1  03           	.byte	$03
00017Er 1  02           	.byte	$02
00017Fr 1  00           	.byte	$00
000180r 1  03           	.byte	$03
000181r 1  02           	.byte	$02
000182r 1  01           	.byte	$01
000183r 1  03           	.byte	$03
000184r 1  02           	.byte	$02
000185r 1  00           	.byte	$00
000186r 1  00           	.byte	$00
000187r 1  01           	.byte	$01
000188r 1  00           	.byte	$00
000189r 1  01           	.byte	$01
00018Ar 1  00           	.byte	$00
00018Br 1  01           	.byte	$01
00018Cr 1  00           	.byte	$00
00018Dr 1  01           	.byte	$01
00018Er 1  03           	.byte	$03
00018Fr 1  02           	.byte	$02
000190r 1  00           	.byte	$00
000191r 1  03           	.byte	$03
000192r 1  02           	.byte	$02
000193r 1  01           	.byte	$01
000194r 1  01           	.byte	$01
000195r 1  00           	.byte	$00
000196r 1  01           	.byte	$01
000197r 1  00           	.byte	$00
000198r 1  01           	.byte	$01
000199r 1  00           	.byte	$00
00019Ar 1  00           	.byte	$00
00019Br 1  01           	.byte	$01
00019Cr 1  00           	.byte	$00
00019Dr 1  03           	.byte	$03
00019Er 1  02           	.byte	$02
00019Fr 1  01           	.byte	$01
0001A0r 1  00           	.byte	$00
0001A1r 1  01           	.byte	$01
0001A2r 1  00           	.byte	$00
0001A3r 1  03           	.byte	$03
0001A4r 1  02           	.byte	$02
0001A5r 1  01           	.byte	$01
0001A6r 1  00           	.byte	$00
0001A7r 1  01           	.byte	$01
0001A8r 1  00           	.byte	$00
0001A9r 1  01           	.byte	$01
0001AAr 1  00           	.byte	$00
0001ABr 1  01           	.byte	$01
0001ACr 1  00           	.byte	$00
0001ADr 1  01           	.byte	$01
0001AEr 1  00           	.byte	$00
0001AFr 1  00           	.byte	$00
0001B0r 1  01           	.byte	$01
0001B1r 1  00           	.byte	$00
0001B2r 1  01           	.byte	$01
0001B3r 1  00           	.byte	$00
0001B4r 1  00           	.byte	$00
0001B5r 1  01           	.byte	$01
0001B6r 1  01           	.byte	$01
0001B7r 1  00           	.byte	$00
0001B8r 1  01           	.byte	$01
0001B9r 1  00           	.byte	$00
0001BAr 1  00           	.byte	$00
0001BBr 1  01           	.byte	$01
0001BCr 1  00           	.byte	$00
0001BDr 1  03           	.byte	$03
0001BEr 1  04           	.byte	$04
0001BFr 1  01           	.byte	$01
0001C0r 1  00           	.byte	$00
0001C1r 1  03           	.byte	$03
0001C2r 1  02           	.byte	$02
0001C3r 1  01           	.byte	$01
0001C4r 1  00           	.byte	$00
0001C5r 1  01           	.byte	$01
0001C6r 1  00           	.byte	$00
0001C7r 1  01           	.byte	$01
0001C8r 1  00           	.byte	$00
0001C9r 1  01           	.byte	$01
0001CAr 1  00           	.byte	$00
0001CBr 1  01           	.byte	$01
0001CCr 1  03           	.byte	$03
0001CDr 1  02           	.byte	$02
0001CEr 1  00           	.byte	$00
0001CFr 1  00           	.byte	$00
0001D0r 1  01           	.byte	$01
0001D1r 1  00           	.byte	$00
0001D2r 1  00           	.byte	$00
0001D3r 1  01           	.byte	$01
0001D4r 1  00           	.byte	$00
0001D5r 1  01           	.byte	$01
0001D6r 1  00           	.byte	$00
0001D7r 1  03           	.byte	$03
0001D8r 1  02           	.byte	$02
0001D9r 1  01           	.byte	$01
0001DAr 1  00           	.byte	$00
0001DBr 1  03           	.byte	$03
0001DCr 1  02           	.byte	$02
0001DDr 1  01           	.byte	$01
0001DEr 1  00           	.byte	$00
0001DFr 1  01           	.byte	$01
0001E0r 1  00           	.byte	$00
0001E1r 1  03           	.byte	$03
0001E2r 1  02           	.byte	$02
0001E3r 1  01           	.byte	$01
0001E4r 1  00           	.byte	$00
0001E5r 1  01           	.byte	$01
0001E6r 1  00           	.byte	$00
0001E7r 1  01           	.byte	$01
0001E8r 1  00           	.byte	$00
0001E9r 1  01           	.byte	$01
0001EAr 1  00           	.byte	$00
0001EBr 1  01           	.byte	$01
0001ECr 1  00           	.byte	$00
0001EDr 1  00           	.byte	$00
0001EEr 1  01           	.byte	$01
0001EFr 1  00           	.byte	$00
0001F0r 1  01           	.byte	$01
0001F1r 1  00           	.byte	$00
0001F2r 1  00           	.byte	$00
0001F3r 1  01           	.byte	$01
0001F4r 1  00           	.byte	$00
0001F5r 1  01           	.byte	$01
0001F6r 1  00           	.byte	$00
0001F7r 1  03           	.byte	$03
0001F8r 1  03           	.byte	$03
0001F9r 1  01           	.byte	$01
0001FAr 1  03           	.byte	$03
0001FBr 1  02           	.byte	$02
0001FCr 1  00           	.byte	$00
0001FDr 1  03           	.byte	$03
0001FEr 1  02           	.byte	$02
0001FFr 1  01           	.byte	$01
000200r 1  03           	.byte	$03
000201r 1  02           	.byte	$02
000202r 1  00           	.byte	$00
000203r 1  03           	.byte	$03
000204r 1  02           	.byte	$02
000205r 1  01           	.byte	$01
000206r 1  00           	.byte	$00
000207r 1  01           	.byte	$01
000208r 1  00           	.byte	$00
000209r 1  00           	.byte	$00
00020Ar 1  01           	.byte	$01
00020Br 1  03           	.byte	$03
00020Cr 1  02           	.byte	$02
00020Dr 1  00           	.byte	$00
00020Er 1  03           	.byte	$03
00020Fr 1  02           	.byte	$02
000210r 1  01           	.byte	$01
000211r 1  01           	.byte	$01
000212r 1  00           	.byte	$00
000213r 1  00           	.byte	$00
000214r 1  01           	.byte	$01
000215r 1  00           	.byte	$00
000216r 1  03           	.byte	$03
000217r 1  20           	.byte	$20
000218r 1  20           	.byte	$20
000219r 1  1E           	.byte	$1E
00021Ar 1  20           	.byte	$20
00021Br 1  22           	.byte	$22
00021Cr 1  00           	.byte	$00
00021Dr 1  05           	.byte	$05
00021Er 1  0C           	.byte	$0C
00021Fr 1  0F           	.byte	$0F
000220r 1  0C           	.byte	$0C
000221r 1  05           	.byte	$05
000222r 1  0C           	.byte	$0C
000223r 1  0F           	.byte	$0F
000224r 1  0C           	.byte	$0C
000225r 1  00           	.byte	$00
000226r 1  0F           	.byte	$0F
000227r 1  04           	.byte	$04
000228r 1  0C           	.byte	$0C
000229r 1  04           	.byte	$04
00022Ar 1  05           	.byte	$05
00022Br 1  04           	.byte	$04
00022Cr 1  12           	.byte	$12
00022Dr 1  00           	.byte	$00
00022Er 1  03           	.byte	$03
00022Fr 1  51           	.byte	$51
000230r 1  02           	.byte	$02
000231r 1  02           	.byte	$02
000232r 1  00           	.byte	$00
000233r 1  00           	.byte	$00
000234r 1  02           	.byte	$02
000235r 1  00           	.byte	$00
000236r 1  00           	.byte	$00
000237r 1  02           	.byte	$02
000238r 1  00           	.byte	$00
000239r 1  02           	.byte	$02
00023Ar 1  00           	.byte	$00
00023Br 1  00           	.byte	$00
00023Cr 1  02           	.byte	$02
00023Dr 1  00           	.byte	$00
00023Er 1  03           	.byte	$03
00023Fr 1  11           	.byte	$11
000240r 1  02           	.byte	$02
000241r 1  00           	.byte	$00
000242r 1  00           	.byte	$00
000243r 1  02           	.byte	$02
000244r 1  00           	.byte	$00
000245r 1  02           	.byte	$02
000246r 1  00           	.byte	$00
000247r 1  00           	.byte	$00
000248r 1  02           	.byte	$02
000249r 1  00           	.byte	$00
00024Ar 1  02           	.byte	$02
00024Br 1  02           	.byte	$02
00024Cr 1  00           	.byte	$00
00024Dr 1  02           	.byte	$02
00024Er 1  00           	.byte	$00
00024Fr 1  03           	.byte	$03
000250r 1  11           	.byte	$11
000251r 1  02           	.byte	$02
000252r 1  00           	.byte	$00
000253r 1  03           	.byte	$03
000254r 1  03           	.byte	$03
000255r 1  02           	.byte	$02
000256r 1  00           	.byte	$00
000257r 1  00           	.byte	$00
000258r 1  02           	.byte	$02
000259r 1  00           	.byte	$00
00025Ar 1  02           	.byte	$02
00025Br 1  00           	.byte	$00
00025Cr 1  02           	.byte	$02
00025Dr 1  02           	.byte	$02
00025Er 1  00           	.byte	$00
00025Fr 1  03           	.byte	$03
000260r 1  11           	.byte	$11
000261r 1  02           	.byte	$02
000262r 1  00           	.byte	$00
000263r 1  02           	.byte	$02
000264r 1  02           	.byte	$02
000265r 1  00           	.byte	$00
000266r 1  02           	.byte	$02
000267r 1  00           	.byte	$00
000268r 1  00           	.byte	$00
000269r 1  02           	.byte	$02
00026Ar 1  00           	.byte	$00
00026Br 1  02           	.byte	$02
00026Cr 1  00           	.byte	$00
00026Dr 1  00           	.byte	$00
00026Er 1  02           	.byte	$02
00026Fr 1  00           	.byte	$00
000270r 1  03           	.byte	$03
000271r 1  12           	.byte	$12
000272r 1  02           	.byte	$02
000273r 1  03           	.byte	$03
000274r 1  02           	.byte	$02
000275r 1  00           	.byte	$00
000276r 1  00           	.byte	$00
000277r 1  02           	.byte	$02
000278r 1  02           	.byte	$02
000279r 1  00           	.byte	$00
00027Ar 1  00           	.byte	$00
00027Br 1  02           	.byte	$02
00027Cr 1  00           	.byte	$00
00027Dr 1  00           	.byte	$00
00027Er 1  02           	.byte	$02
00027Fr 1  00           	.byte	$00
000280r 1  03           	.byte	$03
000281r 1  6A           	.byte	$6A
000282r 1  00           	.byte	$00
000283r 1  03           	.byte	$03
000284r 1  00           	.byte	$00
000285r 1               _boxes_0_data:
000285r 1  00           	.byte	$00
000286r 1  00           	.byte	$00
000287r 1  01           	.byte	$01
000288r 1  00           	.byte	$00
000289r 1  00           	.byte	$00
00028Ar 1  08           	.byte	$08
00028Br 1  01           	.byte	$01
00028Cr 1  00           	.byte	$00
00028Dr 1  08           	.byte	$08
00028Er 1  00           	.byte	$00
00028Fr 1  01           	.byte	$01
000290r 1  00           	.byte	$00
000291r 1  08           	.byte	$08
000292r 1  08           	.byte	$08
000293r 1  01           	.byte	$01
000294r 1  00           	.byte	$00
000295r 1  10           	.byte	$10
000296r 1  00           	.byte	$00
000297r 1  01           	.byte	$01
000298r 1  00           	.byte	$00
000299r 1  10           	.byte	$10
00029Ar 1  08           	.byte	$08
00029Br 1  01           	.byte	$01
00029Cr 1  00           	.byte	$00
00029Dr 1  18           	.byte	$18
00029Er 1  00           	.byte	$00
00029Fr 1  01           	.byte	$01
0002A0r 1  00           	.byte	$00
0002A1r 1  18           	.byte	$18
0002A2r 1  08           	.byte	$08
0002A3r 1  01           	.byte	$01
0002A4r 1  00           	.byte	$00
0002A5r 1  00           	.byte	$00
0002A6r 1  10           	.byte	$10
0002A7r 1  01           	.byte	$01
0002A8r 1  00           	.byte	$00
0002A9r 1  00           	.byte	$00
0002AAr 1  18           	.byte	$18
0002ABr 1  01           	.byte	$01
0002ACr 1  00           	.byte	$00
0002ADr 1  08           	.byte	$08
0002AEr 1  10           	.byte	$10
0002AFr 1  01           	.byte	$01
0002B0r 1  00           	.byte	$00
0002B1r 1  10           	.byte	$10
0002B2r 1  10           	.byte	$10
0002B3r 1  01           	.byte	$01
0002B4r 1  00           	.byte	$00
0002B5r 1  18           	.byte	$18
0002B6r 1  10           	.byte	$10
0002B7r 1  01           	.byte	$01
0002B8r 1  00           	.byte	$00
0002B9r 1  08           	.byte	$08
0002BAr 1  18           	.byte	$18
0002BBr 1  01           	.byte	$01
0002BCr 1  00           	.byte	$00
0002BDr 1  10           	.byte	$10
0002BEr 1  18           	.byte	$18
0002BFr 1  01           	.byte	$01
0002C0r 1  00           	.byte	$00
0002C1r 1  18           	.byte	$18
0002C2r 1  18           	.byte	$18
0002C3r 1  01           	.byte	$01
0002C4r 1  00           	.byte	$00
0002C5r 1  80           	.byte	$80
0002C6r 1               _boxes_1_data:
0002C6r 1  08           	.byte	$08
0002C7r 1  00           	.byte	$00
0002C8r 1  01           	.byte	$01
0002C9r 1  00           	.byte	$00
0002CAr 1  10           	.byte	$10
0002CBr 1  00           	.byte	$00
0002CCr 1  01           	.byte	$01
0002CDr 1  00           	.byte	$00
0002CEr 1  08           	.byte	$08
0002CFr 1  08           	.byte	$08
0002D0r 1  01           	.byte	$01
0002D1r 1  00           	.byte	$00
0002D2r 1  10           	.byte	$10
0002D3r 1  08           	.byte	$08
0002D4r 1  01           	.byte	$01
0002D5r 1  00           	.byte	$00
0002D6r 1  00           	.byte	$00
0002D7r 1  10           	.byte	$10
0002D8r 1  01           	.byte	$01
0002D9r 1  00           	.byte	$00
0002DAr 1  08           	.byte	$08
0002DBr 1  10           	.byte	$10
0002DCr 1  01           	.byte	$01
0002DDr 1  00           	.byte	$00
0002DEr 1  10           	.byte	$10
0002DFr 1  10           	.byte	$10
0002E0r 1  01           	.byte	$01
0002E1r 1  00           	.byte	$00
0002E2r 1  80           	.byte	$80
0002E3r 1               _boxes_list:
0002E3r 1  rr rr        	.addr	_boxes_0_data
0002E5r 1  rr rr        	.addr	_boxes_1_data
0002E7r 1               _enemy_0_data:
0002E7r 1  00           	.byte	$00
0002E8r 1  09           	.byte	$09
0002E9r 1  04           	.byte	$04
0002EAr 1  01           	.byte	$01
0002EBr 1  08           	.byte	$08
0002ECr 1  09           	.byte	$09
0002EDr 1  05           	.byte	$05
0002EEr 1  01           	.byte	$01
0002EFr 1  10           	.byte	$10
0002F0r 1  09           	.byte	$09
0002F1r 1  06           	.byte	$06
0002F2r 1  01           	.byte	$01
0002F3r 1  08           	.byte	$08
0002F4r 1  01           	.byte	$01
0002F5r 1  02           	.byte	$02
0002F6r 1  01           	.byte	$01
0002F7r 1  10           	.byte	$10
0002F8r 1  01           	.byte	$01
0002F9r 1  03           	.byte	$03
0002FAr 1  01           	.byte	$01
0002FBr 1  18           	.byte	$18
0002FCr 1  09           	.byte	$09
0002FDr 1  07           	.byte	$07
0002FEr 1  01           	.byte	$01
0002FFr 1  00           	.byte	$00
000300r 1  11           	.byte	$11
000301r 1  08           	.byte	$08
000302r 1  01           	.byte	$01
000303r 1  08           	.byte	$08
000304r 1  11           	.byte	$11
000305r 1  09           	.byte	$09
000306r 1  01           	.byte	$01
000307r 1  10           	.byte	$10
000308r 1  11           	.byte	$11
000309r 1  0A           	.byte	$0A
00030Ar 1  01           	.byte	$01
00030Br 1  18           	.byte	$18
00030Cr 1  11           	.byte	$11
00030Dr 1  0B           	.byte	$0B
00030Er 1  01           	.byte	$01
00030Fr 1  00           	.byte	$00
000310r 1  19           	.byte	$19
000311r 1  0C           	.byte	$0C
000312r 1  01           	.byte	$01
000313r 1  08           	.byte	$08
000314r 1  19           	.byte	$19
000315r 1  0D           	.byte	$0D
000316r 1  01           	.byte	$01
000317r 1  10           	.byte	$10
000318r 1  19           	.byte	$19
000319r 1  0E           	.byte	$0E
00031Ar 1  01           	.byte	$01
00031Br 1  18           	.byte	$18
00031Cr 1  19           	.byte	$19
00031Dr 1  0F           	.byte	$0F
00031Er 1  01           	.byte	$01
00031Fr 1  80           	.byte	$80
000320r 1               _enemy_1_data:
000320r 1  00           	.byte	$00
000321r 1  08           	.byte	$08
000322r 1  04           	.byte	$04
000323r 1  01           	.byte	$01
000324r 1  08           	.byte	$08
000325r 1  08           	.byte	$08
000326r 1  05           	.byte	$05
000327r 1  01           	.byte	$01
000328r 1  10           	.byte	$10
000329r 1  08           	.byte	$08
00032Ar 1  06           	.byte	$06
00032Br 1  01           	.byte	$01
00032Cr 1  08           	.byte	$08
00032Dr 1  00           	.byte	$00
00032Er 1  02           	.byte	$02
00032Fr 1  01           	.byte	$01
000330r 1  10           	.byte	$10
000331r 1  00           	.byte	$00
000332r 1  03           	.byte	$03
000333r 1  01           	.byte	$01
000334r 1  18           	.byte	$18
000335r 1  08           	.byte	$08
000336r 1  07           	.byte	$07
000337r 1  01           	.byte	$01
000338r 1  00           	.byte	$00
000339r 1  10           	.byte	$10
00033Ar 1  08           	.byte	$08
00033Br 1  01           	.byte	$01
00033Cr 1  08           	.byte	$08
00033Dr 1  10           	.byte	$10
00033Er 1  09           	.byte	$09
00033Fr 1  01           	.byte	$01
000340r 1  10           	.byte	$10
000341r 1  10           	.byte	$10
000342r 1  0A           	.byte	$0A
000343r 1  01           	.byte	$01
000344r 1  18           	.byte	$18
000345r 1  10           	.byte	$10
000346r 1  0B           	.byte	$0B
000347r 1  01           	.byte	$01
000348r 1  00           	.byte	$00
000349r 1  18           	.byte	$18
00034Ar 1  10           	.byte	$10
00034Br 1  01           	.byte	$01
00034Cr 1  08           	.byte	$08
00034Dr 1  18           	.byte	$18
00034Er 1  11           	.byte	$11
00034Fr 1  01           	.byte	$01
000350r 1  10           	.byte	$10
000351r 1  18           	.byte	$18
000352r 1  12           	.byte	$12
000353r 1  01           	.byte	$01
000354r 1  18           	.byte	$18
000355r 1  18           	.byte	$18
000356r 1  13           	.byte	$13
000357r 1  01           	.byte	$01
000358r 1  80           	.byte	$80
000359r 1               _enemy_list:
000359r 1  rr rr        	.addr	_enemy_0_data
00035Br 1  rr rr        	.addr	_enemy_0_data
00035Dr 1  rr rr        	.addr	_enemy_0_data
00035Fr 1  rr rr        	.addr	_enemy_0_data
000361r 1  rr rr        	.addr	_enemy_0_data
000363r 1  rr rr        	.addr	_enemy_0_data
000365r 1  rr rr        	.addr	_enemy_1_data
000367r 1  rr rr        	.addr	_enemy_1_data
000369r 1  rr rr        	.addr	_enemy_1_data
00036Br 1  rr rr        	.addr	_enemy_1_data
00036Dr 1  rr rr        	.addr	_enemy_1_data
00036Fr 1  rr rr        	.addr	_enemy_1_data
000371r 1               _pal:
000371r 1  0F           	.byte	$0F
000372r 1  27           	.byte	$27
000373r 1  17           	.byte	$17
000374r 1  07           	.byte	$07
000375r 1  0F           	.byte	$0F
000376r 1  0F           	.byte	$0F
000377r 1  37           	.byte	$37
000378r 1  10           	.byte	$10
000379r 1  0F           	.byte	$0F
00037Ar 1  30           	.byte	$30
00037Br 1  30           	.byte	$30
00037Cr 1  30           	.byte	$30
00037Dr 1  0F           	.byte	$0F
00037Er 1  0F           	.byte	$0F
00037Fr 1  0F           	.byte	$0F
000380r 1  0F           	.byte	$0F
000381r 1  0F           	.byte	$0F
000382r 1  30           	.byte	$30
000383r 1  0F           	.byte	$0F
000384r 1  0F           	.byte	$0F
000385r 1  0F           	.byte	$0F
000386r 1  0F           	.byte	$0F
000387r 1  27           	.byte	$27
000388r 1  37           	.byte	$37
000389r 1  0F           	.byte	$0F
00038Ar 1  0F           	.byte	$0F
00038Br 1  0F           	.byte	$0F
00038Cr 1  0F           	.byte	$0F
00038Dr 1  0F           	.byte	$0F
00038Er 1  0F           	.byte	$0F
00038Fr 1  0F           	.byte	$0F
000390r 1  0F           	.byte	$0F
000391r 1               
000391r 1               .segment	"BSS"
000000r 1               
000000r 1               .segment	"ZEROPAGE"
000000r 1               _pad2_zapper:
000000r 1  00           	.res	1,$00
000001r 1               _zapper_ready:
000001r 1  00           	.res	1,$00
000002r 1               _hit_detected:
000002r 1  00           	.res	1,$00
000003r 1               _temp1:
000003r 1  00           	.res	1,$00
000004r 1               _temp2:
000004r 1  00           	.res	1,$00
000005r 1               _state:
000005r 1  00           	.res	1,$00
000006r 1               _scroll_x:
000006r 1  00           	.res	1,$00
000007r 1               _enemy_x:
000007r 1  00           	.res	1,$00
000008r 1               _enemy_y:
000008r 1  00           	.res	1,$00
000009r 1               _enemy_type:
000009r 1  00           	.res	1,$00
00000Ar 1               _enemy_frame:
00000Ar 1  00           	.res	1,$00
00000Br 1               
00000Br 1               ; ---------------------------------------------------------------
00000Br 1               ; void __near__ draw_title_box (void)
00000Br 1               ; ---------------------------------------------------------------
00000Br 1               
00000Br 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_draw_title_box: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; oam_meta_spr(110,58,boxes_list[0]);
000000r 1               ;
000000r 1  A9 6E        	lda     #$6E
000002r 1  20 rr rr     	jsr     pusha
000005r 1  A9 3A        	lda     #$3A
000007r 1  20 rr rr     	jsr     pusha
00000Ar 1  AD rr rr     	lda     _boxes_list
00000Dr 1  AE rr rr     	ldx     _boxes_list+1
000010r 1  20 rr rr     	jsr     _oam_meta_spr
000013r 1               ;
000013r 1               ; }
000013r 1               ;
000013r 1  60           	rts
000014r 1               
000014r 1               .endproc
000014r 1               
000014r 1               ; ---------------------------------------------------------------
000014r 1               ; void __near__ draw_enemy_box (void)
000014r 1               ; ---------------------------------------------------------------
000014r 1               
000014r 1               .segment	"CODE"
000014r 1               
000014r 1               .proc	_draw_enemy_box: near
000014r 1               
000014r 1               .segment	"CODE"
000014r 1               
000014r 1               ;
000014r 1               ; oam_meta_spr(enemy_x,enemy_y,boxes_list[1]);
000014r 1               ;
000014r 1  A5 rr        	lda     _enemy_x
000016r 1  20 rr rr     	jsr     pusha
000019r 1  A5 rr        	lda     _enemy_y
00001Br 1  20 rr rr     	jsr     pusha
00001Er 1  AD rr rr     	lda     _boxes_list+2
000021r 1  AE rr rr     	ldx     _boxes_list+2+1
000024r 1  20 rr rr     	jsr     _oam_meta_spr
000027r 1               ;
000027r 1               ; }
000027r 1               ;
000027r 1  60           	rts
000028r 1               
000028r 1               .endproc
000028r 1               
000028r 1               ; ---------------------------------------------------------------
000028r 1               ; void __near__ draw_enemy (void)
000028r 1               ; ---------------------------------------------------------------
000028r 1               
000028r 1               .segment	"CODE"
000028r 1               
000028r 1               .proc	_draw_enemy: near
000028r 1               
000028r 1               .segment	"CODE"
000028r 1               
000028r 1               ;
000028r 1               ; oam_meta_spr(enemy_x,enemy_y,enemy_list[enemy_frame]);
000028r 1               ;
000028r 1  A5 rr        	lda     _enemy_x
00002Ar 1  20 rr rr     	jsr     pusha
00002Dr 1  A5 rr        	lda     _enemy_y
00002Fr 1  20 rr rr     	jsr     pusha
000032r 1  A2 00        	ldx     #$00
000034r 1  A5 rr        	lda     _enemy_frame
000036r 1  20 rr rr     	jsr     aslax1
000039r 1  18           	clc
00003Ar 1  69 rr        	adc     #<(_enemy_list)
00003Cr 1  A8           	tay
00003Dr 1  8A           	txa
00003Er 1  69 rr        	adc     #>(_enemy_list)
000040r 1  AA           	tax
000041r 1  98           	tya
000042r 1  A0 01        	ldy     #$01
000044r 1  20 rr rr     	jsr     ldaxidx
000047r 1  20 rr rr     	jsr     _oam_meta_spr
00004Ar 1               ;
00004Ar 1               ; }
00004Ar 1               ;
00004Ar 1  60           	rts
00004Br 1               
00004Br 1               .endproc
00004Br 1               
00004Br 1               ; ---------------------------------------------------------------
00004Br 1               ; void __near__ main (void)
00004Br 1               ; ---------------------------------------------------------------
00004Br 1               
00004Br 1               .segment	"CODE"
00004Br 1               
00004Br 1               .proc	_main: near
00004Br 1               
00004Br 1               .segment	"CODE"
00004Br 1               
00004Br 1               ;
00004Br 1               ; ppu_off(); // screen off
00004Br 1               ;
00004Br 1  20 rr rr     	jsr     _ppu_off
00004Er 1               ;
00004Er 1               ; bank_bg(1);
00004Er 1               ;
00004Er 1  A9 01        	lda     #$01
000050r 1  20 rr rr     	jsr     _bank_bg
000053r 1               ;
000053r 1               ; pal_all(pal);
000053r 1               ;
000053r 1  A9 rr        	lda     #<(_pal)
000055r 1  A2 rr        	ldx     #>(_pal)
000057r 1  20 rr rr     	jsr     _pal_all
00005Ar 1               ;
00005Ar 1               ; vram_adr(NAMETABLE_A);
00005Ar 1               ;
00005Ar 1  A2 20        	ldx     #$20
00005Cr 1  A9 00        	lda     #$00
00005Er 1  20 rr rr     	jsr     _vram_adr
000061r 1               ;
000061r 1               ; vram_unrle(title);
000061r 1               ;
000061r 1  A9 rr        	lda     #<(_title)
000063r 1  A2 rr        	ldx     #>(_title)
000065r 1  20 rr rr     	jsr     _vram_unrle
000068r 1               ;
000068r 1               ; ppu_wait_nmi(); // wait
000068r 1               ;
000068r 1  20 rr rr     	jsr     _ppu_wait_nmi
00006Br 1               ;
00006Br 1               ; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
00006Br 1               ;
00006Br 1  20 rr rr     	jsr     _set_vram_buffer
00006Er 1               ;
00006Er 1               ; music_play(1);
00006Er 1               ;
00006Er 1  A9 01        	lda     #$01
000070r 1  20 rr rr     	jsr     _music_play
000073r 1               ;
000073r 1               ; ppu_on_all(); // turn on screen
000073r 1               ;
000073r 1  20 rr rr     	jsr     _ppu_on_all
000076r 1               ;
000076r 1               ; while (1){
000076r 1               ;
000076r 1  4C rr rr     	jmp     L002D
000079r 1               ;
000079r 1               ; ppu_wait_nmi(); // wait till beginning of the frame
000079r 1               ;
000079r 1  20 rr rr     L0002:	jsr     _ppu_wait_nmi
00007Cr 1               ;
00007Cr 1               ; if(timer0>0)
00007Cr 1               ;
00007Cr 1  A2 00        	ldx     #$00
00007Er 1  AD rr rr     	lda     _timer0
000081r 1  C9 00        	cmp     #$00
000083r 1  20 rr rr     	jsr     boolne
000086r 1  D0 03 4C rr  	jeq     L0005
00008Ar 1  rr           
00008Br 1               ;
00008Br 1               ; timer0--;
00008Br 1               ;
00008Br 1  A2 00        	ldx     #$00
00008Dr 1  AD rr rr     	lda     _timer0
000090r 1  CE rr rr     	dec     _timer0
000093r 1               ;
000093r 1               ; oam_clear();
000093r 1               ;
000093r 1  20 rr rr     L0005:	jsr     _oam_clear
000096r 1               ;
000096r 1               ; zapper_ready = pad2_zapper^1; // XOR last frame, make sure not held down still
000096r 1               ;
000096r 1  A2 00        	ldx     #$00
000098r 1  A5 rr        	lda     _pad2_zapper
00009Ar 1  49 01        	eor     #$01
00009Cr 1  A2 00        	ldx     #$00
00009Er 1  85 rr        	sta     _zapper_ready
0000A0r 1               ;
0000A0r 1               ; pad2_zapper = zap_shoot(1); // controller slot 2
0000A0r 1               ;
0000A0r 1  A9 01        	lda     #$01
0000A2r 1  20 rr rr     	jsr     _zap_shoot
0000A5r 1  85 rr        	sta     _pad2_zapper
0000A7r 1               ;
0000A7r 1               ; if(state==1){
0000A7r 1               ;
0000A7r 1  A2 00        	ldx     #$00
0000A9r 1  A5 rr        	lda     _state
0000ABr 1  C9 01        	cmp     #$01
0000ADr 1  20 rr rr     	jsr     booleq
0000B0r 1  D0 03 4C rr  	jeq     L000F
0000B4r 1  rr           
0000B5r 1               ;
0000B5r 1               ; scroll_x+=5;
0000B5r 1               ;
0000B5r 1  A2 00        	ldx     #$00
0000B7r 1  A9 05        	lda     #$05
0000B9r 1  18           	clc
0000BAr 1  65 rr        	adc     _scroll_x
0000BCr 1  85 rr        	sta     _scroll_x
0000BEr 1               ;
0000BEr 1               ; draw_enemy();
0000BEr 1               ;
0000BEr 1  20 rr rr     	jsr     _draw_enemy
0000C1r 1               ;
0000C1r 1               ; if(enemy_frame==11){
0000C1r 1               ;
0000C1r 1  A2 00        	ldx     #$00
0000C3r 1  A5 rr        	lda     _enemy_frame
0000C5r 1  C9 0B        	cmp     #$0B
0000C7r 1  20 rr rr     	jsr     booleq
0000CAr 1  D0 03 4C rr  	jeq     L0007
0000CEr 1  rr           
0000CFr 1               ;
0000CFr 1               ; enemy_frame=0;
0000CFr 1               ;
0000CFr 1  A2 00        	ldx     #$00
0000D1r 1  A9 00        	lda     #$00
0000D3r 1  85 rr        	sta     _enemy_frame
0000D5r 1               ;
0000D5r 1               ; }else
0000D5r 1               ;
0000D5r 1  4C rr rr     	jmp     L0008
0000D8r 1               ;
0000D8r 1               ; enemy_frame++;
0000D8r 1               ;
0000D8r 1  A2 00        L0007:	ldx     #$00
0000DAr 1  A5 rr        	lda     _enemy_frame
0000DCr 1  E6 rr        	inc     _enemy_frame
0000DEr 1               ;
0000DEr 1               ; if(enemy_type==0){
0000DEr 1               ;
0000DEr 1  A2 00        L0008:	ldx     #$00
0000E0r 1  A5 rr        	lda     _enemy_type
0000E2r 1  C9 00        	cmp     #$00
0000E4r 1  20 rr rr     	jsr     booleq
0000E7r 1  D0 03 4C rr  	jeq     L0009
0000EBr 1  rr           
0000ECr 1               ;
0000ECr 1               ; enemy_x++;
0000ECr 1               ;
0000ECr 1  A2 00        	ldx     #$00
0000EEr 1  A5 rr        	lda     _enemy_x
0000F0r 1  E6 rr        	inc     _enemy_x
0000F2r 1               ;
0000F2r 1               ; enemy_y=190;
0000F2r 1               ;
0000F2r 1  A2 00        	ldx     #$00
0000F4r 1  A9 BE        	lda     #$BE
0000F6r 1  85 rr        	sta     _enemy_y
0000F8r 1               ;
0000F8r 1               ; if(enemy_type==1){
0000F8r 1               ;
0000F8r 1  A2 00        L0009:	ldx     #$00
0000FAr 1  A5 rr        	lda     _enemy_type
0000FCr 1  C9 01        	cmp     #$01
0000FEr 1  20 rr rr     	jsr     booleq
000101r 1  D0 03 4C rr  	jeq     L000A
000105r 1  rr           
000106r 1               ;
000106r 1               ; enemy_x+=3;
000106r 1               ;
000106r 1  A2 00        	ldx     #$00
000108r 1  A9 03        	lda     #$03
00010Ar 1  18           	clc
00010Br 1  65 rr        	adc     _enemy_x
00010Dr 1  85 rr        	sta     _enemy_x
00010Fr 1               ;
00010Fr 1               ; enemy_y=190;
00010Fr 1               ;
00010Fr 1  A2 00        	ldx     #$00
000111r 1  A9 BE        	lda     #$BE
000113r 1  85 rr        	sta     _enemy_y
000115r 1               ;
000115r 1               ; if(enemy_type==2){
000115r 1               ;
000115r 1  A2 00        L000A:	ldx     #$00
000117r 1  A5 rr        	lda     _enemy_type
000119r 1  C9 02        	cmp     #$02
00011Br 1  20 rr rr     	jsr     booleq
00011Er 1  D0 03 4C rr  	jeq     L000F
000122r 1  rr           
000123r 1               ;
000123r 1               ; enemy_x++;
000123r 1               ;
000123r 1  A2 00        	ldx     #$00
000125r 1  A5 rr        	lda     _enemy_x
000127r 1  E6 rr        	inc     _enemy_x
000129r 1               ;
000129r 1               ; if(floating_down==0){
000129r 1               ;
000129r 1  A2 00        	ldx     #$00
00012Br 1  AD rr rr     	lda     _floating_down
00012Er 1  C9 00        	cmp     #$00
000130r 1  20 rr rr     	jsr     booleq
000133r 1  D0 03 4C rr  	jeq     L000C
000137r 1  rr           
000138r 1               ;
000138r 1               ; enemy_y-=3;
000138r 1               ;
000138r 1  A2 00        	ldx     #$00
00013Ar 1  A5 rr        	lda     _enemy_y
00013Cr 1  38           	sec
00013Dr 1  E9 03        	sbc     #$03
00013Fr 1  85 rr        	sta     _enemy_y
000141r 1               ;
000141r 1               ; if(enemy_y<100)
000141r 1               ;
000141r 1  A2 00        	ldx     #$00
000143r 1  A5 rr        	lda     _enemy_y
000145r 1  C9 64        	cmp     #$64
000147r 1  20 rr rr     	jsr     boolult
00014Ar 1  D0 03 4C rr  	jeq     L000D
00014Er 1  rr           
00014Fr 1               ;
00014Fr 1               ; floating_down=1;
00014Fr 1               ;
00014Fr 1  A2 00        	ldx     #$00
000151r 1  A9 01        	lda     #$01
000153r 1  8D rr rr     	sta     _floating_down
000156r 1               ;
000156r 1               ; }else{
000156r 1               ;
000156r 1  4C rr rr     L000D:	jmp     L000F
000159r 1               ;
000159r 1               ; enemy_y+=3;
000159r 1               ;
000159r 1  A2 00        L000C:	ldx     #$00
00015Br 1  A9 03        	lda     #$03
00015Dr 1  18           	clc
00015Er 1  65 rr        	adc     _enemy_y
000160r 1  85 rr        	sta     _enemy_y
000162r 1               ;
000162r 1               ; if(enemy_y>190)
000162r 1               ;
000162r 1  A2 00        	ldx     #$00
000164r 1  A5 rr        	lda     _enemy_y
000166r 1  C9 BF        	cmp     #$BF
000168r 1  A9 00        	lda     #$00
00016Ar 1  A2 00        	ldx     #$00
00016Cr 1  2A           	rol     a
00016Dr 1  D0 03 4C rr  	jeq     L000F
000171r 1  rr           
000172r 1               ;
000172r 1               ; floating_down=0;
000172r 1               ;
000172r 1  A2 00        	ldx     #$00
000174r 1  A9 00        	lda     #$00
000176r 1  8D rr rr     	sta     _floating_down
000179r 1               ;
000179r 1               ; if(state==2){
000179r 1               ;
000179r 1  A2 00        L000F:	ldx     #$00
00017Br 1  A5 rr        	lda     _state
00017Dr 1  C9 02        	cmp     #$02
00017Fr 1  20 rr rr     	jsr     booleq
000182r 1  D0 03 4C rr  	jeq     L0015
000186r 1  rr           
000187r 1               ;
000187r 1               ; if(timer==60){
000187r 1               ;
000187r 1  A2 00        	ldx     #$00
000189r 1  AD rr rr     	lda     _timer
00018Cr 1  C9 3C        	cmp     #$3C
00018Er 1  20 rr rr     	jsr     booleq
000191r 1  D0 03 4C rr  	jeq     L0011
000195r 1  rr           
000196r 1               ;
000196r 1               ; scroll_x=0;
000196r 1               ;
000196r 1  A2 00        	ldx     #$00
000198r 1  A9 00        	lda     #$00
00019Ar 1  85 rr        	sta     _scroll_x
00019Cr 1               ;
00019Cr 1               ; ppu_off();
00019Cr 1               ;
00019Cr 1  20 rr rr     	jsr     _ppu_off
00019Fr 1               ;
00019Fr 1               ; vram_adr(0x210C);
00019Fr 1               ;
00019Fr 1  A2 21        	ldx     #$21
0001A1r 1  A9 0C        	lda     #$0C
0001A3r 1  20 rr rr     	jsr     _vram_adr
0001A6r 1               ;
0001A6r 1               ; vram_put(0x15);
0001A6r 1               ;
0001A6r 1  A9 15        	lda     #$15
0001A8r 1  20 rr rr     	jsr     _vram_put
0001ABr 1               ;
0001ABr 1               ; vram_put(0x08);
0001ABr 1               ;
0001ABr 1  A9 08        	lda     #$08
0001ADr 1  20 rr rr     	jsr     _vram_put
0001B0r 1               ;
0001B0r 1               ; vram_put(0x04);
0001B0r 1               ;
0001B0r 1  A9 04        	lda     #$04
0001B2r 1  20 rr rr     	jsr     _vram_put
0001B5r 1               ;
0001B5r 1               ; vram_put(0x07);
0001B5r 1               ;
0001B5r 1  A9 07        	lda     #$07
0001B7r 1  20 rr rr     	jsr     _vram_put
0001BAr 1               ;
0001BAr 1               ; vram_put(0x1C);
0001BAr 1               ;
0001BAr 1  A9 1C        	lda     #$1C
0001BCr 1  20 rr rr     	jsr     _vram_put
0001BFr 1               ;
0001BFr 1               ; ppu_on_all();
0001BFr 1               ;
0001BFr 1  20 rr rr     	jsr     _ppu_on_all
0001C2r 1               ;
0001C2r 1               ; timer--;
0001C2r 1               ;
0001C2r 1  A2 00        L0011:	ldx     #$00
0001C4r 1  AD rr rr     	lda     _timer
0001C7r 1  CE rr rr     	dec     _timer
0001CAr 1               ;
0001CAr 1               ; if(timer==0){
0001CAr 1               ;
0001CAr 1  A2 00        	ldx     #$00
0001CCr 1  AD rr rr     	lda     _timer
0001CFr 1  C9 00        	cmp     #$00
0001D1r 1  20 rr rr     	jsr     booleq
0001D4r 1  D0 03 4C rr  	jeq     L0015
0001D8r 1  rr           
0001D9r 1               ;
0001D9r 1               ; ppu_off();
0001D9r 1               ;
0001D9r 1  20 rr rr     	jsr     _ppu_off
0001DCr 1               ;
0001DCr 1               ; vram_adr(NAMETABLE_A);
0001DCr 1               ;
0001DCr 1  A2 20        	ldx     #$20
0001DEr 1  A9 00        	lda     #$00
0001E0r 1  20 rr rr     	jsr     _vram_adr
0001E3r 1               ;
0001E3r 1               ; vram_unrle(sands);
0001E3r 1               ;
0001E3r 1  A9 rr        	lda     #<(_sands)
0001E5r 1  A2 rr        	ldx     #>(_sands)
0001E7r 1  20 rr rr     	jsr     _vram_unrle
0001EAr 1               ;
0001EAr 1               ; ppu_on_all();
0001EAr 1               ;
0001EAr 1  20 rr rr     	jsr     _ppu_on_all
0001EDr 1               ;
0001EDr 1               ; enemy_x=0;
0001EDr 1               ;
0001EDr 1  A2 00        	ldx     #$00
0001EFr 1  A9 00        	lda     #$00
0001F1r 1  85 rr        	sta     _enemy_x
0001F3r 1               ;
0001F3r 1               ; enemy_y=190;
0001F3r 1               ;
0001F3r 1  A2 00        	ldx     #$00
0001F5r 1  A9 BE        	lda     #$BE
0001F7r 1  85 rr        	sta     _enemy_y
0001F9r 1               ;
0001F9r 1               ; state=1;
0001F9r 1               ;
0001F9r 1  A2 00        	ldx     #$00
0001FBr 1  A9 01        	lda     #$01
0001FDr 1  85 rr        	sta     _state
0001FFr 1               ;
0001FFr 1               ; health=10;
0001FFr 1               ;
0001FFr 1  A2 00        	ldx     #$00
000201r 1  A9 0A        	lda     #$0A
000203r 1  8D rr rr     	sta     _health
000206r 1               ;
000206r 1               ; enemy_type=rand() % 3 + 0;
000206r 1               ;
000206r 1  20 rr rr     	jsr     _rand
000209r 1  20 rr rr     	jsr     pushax
00020Cr 1  A2 00        	ldx     #$00
00020Er 1  A9 03        	lda     #$03
000210r 1  20 rr rr     	jsr     tosmodax
000213r 1  A2 00        	ldx     #$00
000215r 1  85 rr        	sta     _enemy_type
000217r 1               ;
000217r 1               ; if(enemy_type==0){
000217r 1               ;
000217r 1  A2 00        	ldx     #$00
000219r 1  A5 rr        	lda     _enemy_type
00021Br 1  C9 00        	cmp     #$00
00021Dr 1  20 rr rr     	jsr     booleq
000220r 1  D0 03 4C rr  	jeq     L0013
000224r 1  rr           
000225r 1               ;
000225r 1               ; pal_col(0x3F14,0x0f);
000225r 1               ;
000225r 1  A9 14        	lda     #$14
000227r 1  20 rr rr     	jsr     pusha
00022Ar 1  A9 0F        	lda     #$0F
00022Cr 1  20 rr rr     	jsr     _pal_col
00022Fr 1               ;
00022Fr 1               ; pal_col(0x3F15,0x0f);
00022Fr 1               ;
00022Fr 1  A9 15        	lda     #$15
000231r 1  20 rr rr     	jsr     pusha
000234r 1  A9 0F        	lda     #$0F
000236r 1  20 rr rr     	jsr     _pal_col
000239r 1               ;
000239r 1               ; pal_col(0x3F16,0x27);
000239r 1               ;
000239r 1  A9 16        	lda     #$16
00023Br 1  20 rr rr     	jsr     pusha
00023Er 1  A9 27        	lda     #$27
000240r 1  20 rr rr     	jsr     _pal_col
000243r 1               ;
000243r 1               ; pal_col(0x3F17,0x37);
000243r 1               ;
000243r 1  A9 17        	lda     #$17
000245r 1  20 rr rr     	jsr     pusha
000248r 1  A9 37        	lda     #$37
00024Ar 1  20 rr rr     	jsr     _pal_col
00024Dr 1               ;
00024Dr 1               ; if(enemy_type==1){
00024Dr 1               ;
00024Dr 1  A2 00        L0013:	ldx     #$00
00024Fr 1  A5 rr        	lda     _enemy_type
000251r 1  C9 01        	cmp     #$01
000253r 1  20 rr rr     	jsr     booleq
000256r 1  D0 03 4C rr  	jeq     L0014
00025Ar 1  rr           
00025Br 1               ;
00025Br 1               ; pal_col(0x3F14,0x22);
00025Br 1               ;
00025Br 1  A9 14        	lda     #$14
00025Dr 1  20 rr rr     	jsr     pusha
000260r 1  A9 22        	lda     #$22
000262r 1  20 rr rr     	jsr     _pal_col
000265r 1               ;
000265r 1               ; pal_col(0x3F15,0x01);
000265r 1               ;
000265r 1  A9 15        	lda     #$15
000267r 1  20 rr rr     	jsr     pusha
00026Ar 1  A9 01        	lda     #$01
00026Cr 1  20 rr rr     	jsr     _pal_col
00026Fr 1               ;
00026Fr 1               ; pal_col(0x3F16,0x21);
00026Fr 1               ;
00026Fr 1  A9 16        	lda     #$16
000271r 1  20 rr rr     	jsr     pusha
000274r 1  A9 21        	lda     #$21
000276r 1  20 rr rr     	jsr     _pal_col
000279r 1               ;
000279r 1               ; pal_col(0x3F17,0x31);
000279r 1               ;
000279r 1  A9 17        	lda     #$17
00027Br 1  20 rr rr     	jsr     pusha
00027Er 1  A9 31        	lda     #$31
000280r 1  20 rr rr     	jsr     _pal_col
000283r 1               ;
000283r 1               ; if(enemy_type==2){
000283r 1               ;
000283r 1  A2 00        L0014:	ldx     #$00
000285r 1  A5 rr        	lda     _enemy_type
000287r 1  C9 02        	cmp     #$02
000289r 1  20 rr rr     	jsr     booleq
00028Cr 1  D0 03 4C rr  	jeq     L0015
000290r 1  rr           
000291r 1               ;
000291r 1               ; floating_down=0;
000291r 1               ;
000291r 1  A2 00        	ldx     #$00
000293r 1  A9 00        	lda     #$00
000295r 1  8D rr rr     	sta     _floating_down
000298r 1               ;
000298r 1               ; pal_col(0x3F14,0x09);
000298r 1               ;
000298r 1  A9 14        	lda     #$14
00029Ar 1  20 rr rr     	jsr     pusha
00029Dr 1  A9 09        	lda     #$09
00029Fr 1  20 rr rr     	jsr     _pal_col
0002A2r 1               ;
0002A2r 1               ; pal_col(0x3F15,0x19);
0002A2r 1               ;
0002A2r 1  A9 15        	lda     #$15
0002A4r 1  20 rr rr     	jsr     pusha
0002A7r 1  A9 19        	lda     #$19
0002A9r 1  20 rr rr     	jsr     _pal_col
0002ACr 1               ;
0002ACr 1               ; pal_col(0x3F16,0x29);
0002ACr 1               ;
0002ACr 1  A9 16        	lda     #$16
0002AEr 1  20 rr rr     	jsr     pusha
0002B1r 1  A9 29        	lda     #$29
0002B3r 1  20 rr rr     	jsr     _pal_col
0002B6r 1               ;
0002B6r 1               ; pal_col(0x3F17,0x39);
0002B6r 1               ;
0002B6r 1  A9 17        	lda     #$17
0002B8r 1  20 rr rr     	jsr     pusha
0002BBr 1  A9 39        	lda     #$39
0002BDr 1  20 rr rr     	jsr     _pal_col
0002C0r 1               ;
0002C0r 1               ; set_scroll_x(scroll_x);
0002C0r 1               ;
0002C0r 1  A2 00        L0015:	ldx     #$00
0002C2r 1  A5 rr        	lda     _scroll_x
0002C4r 1  20 rr rr     	jsr     _set_scroll_x
0002C7r 1               ;
0002C7r 1               ; if((pad2_zapper)&&(zapper_ready)){
0002C7r 1               ;
0002C7r 1  A5 rr        	lda     _pad2_zapper
0002C9r 1  D0 03 4C rr  	jeq     L0017
0002CDr 1  rr           
0002CEr 1  A5 rr        	lda     _zapper_ready
0002D0r 1  F0 03 4C rr  	jne     L0018
0002D4r 1  rr           
0002D5r 1  A2 00        L0017:	ldx     #$00
0002D7r 1  A9 00        	lda     #$00
0002D9r 1  D0 03 4C rr  	jeq     L0019
0002DDr 1  rr           
0002DEr 1  A2 00        L0018:	ldx     #$00
0002E0r 1  A9 01        	lda     #$01
0002E2r 1  D0 03 4C rr  L0019:	jeq     L002D
0002E6r 1  rr           
0002E7r 1               ;
0002E7r 1               ; if(shoot==0){
0002E7r 1               ;
0002E7r 1  A2 00        	ldx     #$00
0002E9r 1  AD rr rr     	lda     _shoot
0002ECr 1  C9 00        	cmp     #$00
0002EEr 1  20 rr rr     	jsr     booleq
0002F1r 1  D0 03 4C rr  	jeq     L001A
0002F5r 1  rr           
0002F6r 1               ;
0002F6r 1               ; if(timer0==0){
0002F6r 1               ;
0002F6r 1  A2 00        	ldx     #$00
0002F8r 1  AD rr rr     	lda     _timer0
0002FBr 1  C9 00        	cmp     #$00
0002FDr 1  20 rr rr     	jsr     booleq
000300r 1  D0 03 4C rr  	jeq     L001B
000304r 1  rr           
000305r 1               ;
000305r 1               ; shoot=5;
000305r 1               ;
000305r 1  A2 00        	ldx     #$00
000307r 1  A9 05        	lda     #$05
000309r 1  8D rr rr     	sta     _shoot
00030Cr 1               ;
00030Cr 1               ; }else{
00030Cr 1               ;
00030Cr 1  4C rr rr     L001B:	jmp     L001D
00030Fr 1               ;
00030Fr 1               ; shoot--;
00030Fr 1               ;
00030Fr 1  A2 00        L001A:	ldx     #$00
000311r 1  AD rr rr     	lda     _shoot
000314r 1  CE rr rr     	dec     _shoot
000317r 1               ;
000317r 1               ; if(shoot==0){
000317r 1               ;
000317r 1  A2 00        	ldx     #$00
000319r 1  AD rr rr     	lda     _shoot
00031Cr 1  C9 00        	cmp     #$00
00031Er 1  20 rr rr     	jsr     booleq
000321r 1  D0 03 4C rr  	jeq     L001D
000325r 1  rr           
000326r 1               ;
000326r 1               ; timer0=30;
000326r 1               ;
000326r 1  A2 00        	ldx     #$00
000328r 1  A9 1E        	lda     #$1E
00032Ar 1  8D rr rr     	sta     _timer0
00032Dr 1               ;
00032Dr 1               ; if((state!=2)&&(shoot>0)){
00032Dr 1               ;
00032Dr 1  A2 00        L001D:	ldx     #$00
00032Fr 1  A5 rr        	lda     _state
000331r 1  C9 02        	cmp     #$02
000333r 1  20 rr rr     	jsr     boolne
000336r 1  D0 03 4C rr  	jeq     L001F
00033Ar 1  rr           
00033Br 1  A2 00        	ldx     #$00
00033Dr 1  AD rr rr     	lda     _shoot
000340r 1  C9 00        	cmp     #$00
000342r 1  20 rr rr     	jsr     boolne
000345r 1  F0 03 4C rr  	jne     L0020
000349r 1  rr           
00034Ar 1  A2 00        L001F:	ldx     #$00
00034Cr 1  A9 00        	lda     #$00
00034Er 1  D0 03 4C rr  	jeq     L0021
000352r 1  rr           
000353r 1  A2 00        L0020:	ldx     #$00
000355r 1  A9 01        	lda     #$01
000357r 1  D0 03 4C rr  L0021:	jeq     L0024
00035Br 1  rr           
00035Cr 1               ;
00035Cr 1               ; sfx_play(0,0);
00035Cr 1               ;
00035Cr 1  A9 00        	lda     #$00
00035Er 1  20 rr rr     	jsr     pusha
000361r 1  A9 00        	lda     #$00
000363r 1  20 rr rr     	jsr     _sfx_play
000366r 1               ;
000366r 1               ; pal_col(0x3F00,0x0F);
000366r 1               ;
000366r 1  A9 00        	lda     #$00
000368r 1  20 rr rr     	jsr     pusha
00036Br 1  A9 0F        	lda     #$0F
00036Dr 1  20 rr rr     	jsr     _pal_col
000370r 1               ;
000370r 1               ; pal_col(0x3F10,0x0F);
000370r 1               ;
000370r 1  A9 10        	lda     #$10
000372r 1  20 rr rr     	jsr     pusha
000375r 1  A9 0F        	lda     #$0F
000377r 1  20 rr rr     	jsr     _pal_col
00037Ar 1               ;
00037Ar 1               ; oam_clear();
00037Ar 1               ;
00037Ar 1  20 rr rr     	jsr     _oam_clear
00037Dr 1               ;
00037Dr 1               ; if(state==0)
00037Dr 1               ;
00037Dr 1  A2 00        	ldx     #$00
00037Fr 1  A5 rr        	lda     _state
000381r 1  C9 00        	cmp     #$00
000383r 1  20 rr rr     	jsr     booleq
000386r 1  D0 03 4C rr  	jeq     L0022
00038Ar 1  rr           
00038Br 1               ;
00038Br 1               ; draw_title_box();
00038Br 1               ;
00038Br 1  20 rr rr     	jsr     _draw_title_box
00038Er 1               ;
00038Er 1               ; if(state==1){
00038Er 1               ;
00038Er 1  A2 00        L0022:	ldx     #$00
000390r 1  A5 rr        	lda     _state
000392r 1  C9 01        	cmp     #$01
000394r 1  20 rr rr     	jsr     booleq
000397r 1  D0 03 4C rr  	jeq     L0023
00039Br 1  rr           
00039Cr 1               ;
00039Cr 1               ; draw_enemy_box();
00039Cr 1               ;
00039Cr 1  20 rr rr     	jsr     _draw_enemy_box
00039Fr 1               ;
00039Fr 1               ; ppu_mask(0x16); // BG off, won't happen till NEXT frame
00039Fr 1               ;
00039Fr 1  A9 16        L0023:	lda     #$16
0003A1r 1  20 rr rr     	jsr     _ppu_mask
0003A4r 1               ;
0003A4r 1               ; ppu_wait_nmi(); // wait till the top of the next frame
0003A4r 1               ;
0003A4r 1  20 rr rr     	jsr     _ppu_wait_nmi
0003A7r 1               ;
0003A7r 1               ; oam_clear(); // clear the NEXT frame
0003A7r 1               ;
0003A7r 1  20 rr rr     	jsr     _oam_clear
0003AAr 1               ;
0003AAr 1               ; if(state==1){
0003AAr 1               ;
0003AAr 1  A2 00        	ldx     #$00
0003ACr 1  A5 rr        	lda     _state
0003AEr 1  C9 01        	cmp     #$01
0003B0r 1  20 rr rr     	jsr     booleq
0003B3r 1  D0 03 4C rr  	jeq     L0024
0003B7r 1  rr           
0003B8r 1               ;
0003B8r 1               ; draw_enemy();
0003B8r 1               ;
0003B8r 1  20 rr rr     	jsr     _draw_enemy
0003BBr 1               ;
0003BBr 1               ; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
0003BBr 1               ;
0003BBr 1  A9 1E        L0024:	lda     #$1E
0003BDr 1  20 rr rr     	jsr     _ppu_mask
0003C0r 1               ;
0003C0r 1               ; if(state==1){
0003C0r 1               ;
0003C0r 1  A2 00        	ldx     #$00
0003C2r 1  A5 rr        	lda     _state
0003C4r 1  C9 01        	cmp     #$01
0003C6r 1  20 rr rr     	jsr     booleq
0003C9r 1  D0 03 4C rr  	jeq     L0025
0003CDr 1  rr           
0003CEr 1               ;
0003CEr 1               ; pal_col(0x3F00,0x22);
0003CEr 1               ;
0003CEr 1  A9 00        	lda     #$00
0003D0r 1  20 rr rr     	jsr     pusha
0003D3r 1  A9 22        	lda     #$22
0003D5r 1  20 rr rr     	jsr     _pal_col
0003D8r 1               ;
0003D8r 1               ; pal_col(0x3F10,0x22);
0003D8r 1               ;
0003D8r 1  A9 10        	lda     #$10
0003DAr 1  20 rr rr     	jsr     pusha
0003DDr 1  A9 22        	lda     #$22
0003DFr 1  20 rr rr     	jsr     _pal_col
0003E2r 1               ;
0003E2r 1               ; hit_detected = zap_read(1); // look for light in zapper, port 2
0003E2r 1               ;
0003E2r 1  A9 01        L0025:	lda     #$01
0003E4r 1  20 rr rr     	jsr     _zap_read
0003E7r 1  85 rr        	sta     _hit_detected
0003E9r 1               ;
0003E9r 1               ; if((hit_detected)&&(shoot>0)){
0003E9r 1               ;
0003E9r 1  A5 rr        	lda     _hit_detected
0003EBr 1  D0 03 4C rr  	jeq     L0027
0003EFr 1  rr           
0003F0r 1  A2 00        	ldx     #$00
0003F2r 1  AD rr rr     	lda     _shoot
0003F5r 1  C9 00        	cmp     #$00
0003F7r 1  20 rr rr     	jsr     boolne
0003FAr 1  F0 03 4C rr  	jne     L0028
0003FEr 1  rr           
0003FFr 1  A2 00        L0027:	ldx     #$00
000401r 1  A9 00        	lda     #$00
000403r 1  D0 03 4C rr  	jeq     L0029
000407r 1  rr           
000408r 1  A2 00        L0028:	ldx     #$00
00040Ar 1  A9 01        	lda     #$01
00040Cr 1  D0 03 4C rr  L0029:	jeq     L002D
000410r 1  rr           
000411r 1               ;
000411r 1               ; if(state==1){
000411r 1               ;
000411r 1  A2 00        	ldx     #$00
000413r 1  A5 rr        	lda     _state
000415r 1  C9 01        	cmp     #$01
000417r 1  20 rr rr     	jsr     booleq
00041Ar 1  D0 03 4C rr  	jeq     L002B
00041Er 1  rr           
00041Fr 1               ;
00041Fr 1               ; health--;
00041Fr 1               ;
00041Fr 1  A2 00        	ldx     #$00
000421r 1  AD rr rr     	lda     _health
000424r 1  CE rr rr     	dec     _health
000427r 1               ;
000427r 1               ; if((health==0)){
000427r 1               ;
000427r 1  A2 00        	ldx     #$00
000429r 1  AD rr rr     	lda     _health
00042Cr 1  C9 00        	cmp     #$00
00042Er 1  20 rr rr     	jsr     booleq
000431r 1  D0 03 4C rr  	jeq     L002B
000435r 1  rr           
000436r 1               ;
000436r 1               ; state=2;
000436r 1               ;
000436r 1  A2 00        	ldx     #$00
000438r 1  A9 02        	lda     #$02
00043Ar 1  85 rr        	sta     _state
00043Cr 1               ;
00043Cr 1               ; timer=60;
00043Cr 1               ;
00043Cr 1  A2 00        	ldx     #$00
00043Er 1  A9 3C        	lda     #$3C
000440r 1  8D rr rr     	sta     _timer
000443r 1               ;
000443r 1               ; score0++;
000443r 1               ;
000443r 1  A2 00        	ldx     #$00
000445r 1  AD rr rr     	lda     _score0
000448r 1  EE rr rr     	inc     _score0
00044Br 1               ;
00044Br 1               ; if(score0==10){
00044Br 1               ;
00044Br 1  A2 00        	ldx     #$00
00044Dr 1  AD rr rr     	lda     _score0
000450r 1  C9 0A        	cmp     #$0A
000452r 1  20 rr rr     	jsr     booleq
000455r 1  D0 03 4C rr  	jeq     L002C
000459r 1  rr           
00045Ar 1               ;
00045Ar 1               ; score0=0;
00045Ar 1               ;
00045Ar 1  A2 00        	ldx     #$00
00045Cr 1  A9 00        	lda     #$00
00045Er 1  8D rr rr     	sta     _score0
000461r 1               ;
000461r 1               ; score1++;
000461r 1               ;
000461r 1  A2 00        	ldx     #$00
000463r 1  AD rr rr     	lda     _score1
000466r 1  EE rr rr     	inc     _score1
000469r 1               ;
000469r 1               ; ppu_off();
000469r 1               ;
000469r 1  20 rr rr     L002C:	jsr     _ppu_off
00046Cr 1               ;
00046Cr 1               ; vram_adr(0x20A0);
00046Cr 1               ;
00046Cr 1  A2 20        	ldx     #$20
00046Er 1  A9 A0        	lda     #$A0
000470r 1  20 rr rr     	jsr     _vram_adr
000473r 1               ;
000473r 1               ; vram_put(0x16);
000473r 1               ;
000473r 1  A9 16        	lda     #$16
000475r 1  20 rr rr     	jsr     _vram_put
000478r 1               ;
000478r 1               ; vram_put(0x06);
000478r 1               ;
000478r 1  A9 06        	lda     #$06
00047Ar 1  20 rr rr     	jsr     _vram_put
00047Dr 1               ;
00047Dr 1               ; vram_put(0x12);
00047Dr 1               ;
00047Dr 1  A9 12        	lda     #$12
00047Fr 1  20 rr rr     	jsr     _vram_put
000482r 1               ;
000482r 1               ; vram_put(0x15);
000482r 1               ;
000482r 1  A9 15        	lda     #$15
000484r 1  20 rr rr     	jsr     _vram_put
000487r 1               ;
000487r 1               ; vram_put(0x08);
000487r 1               ;
000487r 1  A9 08        	lda     #$08
000489r 1  20 rr rr     	jsr     _vram_put
00048Cr 1               ;
00048Cr 1               ; vram_put(0x00);
00048Cr 1               ;
00048Cr 1  A9 00        	lda     #$00
00048Er 1  20 rr rr     	jsr     _vram_put
000491r 1               ;
000491r 1               ; temp1=score1+0x1E;
000491r 1               ;
000491r 1  A2 00        	ldx     #$00
000493r 1  AD rr rr     	lda     _score1
000496r 1  A0 1E        	ldy     #$1E
000498r 1  20 rr rr     	jsr     incaxy
00049Br 1  A2 00        	ldx     #$00
00049Dr 1  85 rr        	sta     _temp1
00049Fr 1               ;
00049Fr 1               ; temp2=score0+0x1E;
00049Fr 1               ;
00049Fr 1  A2 00        	ldx     #$00
0004A1r 1  AD rr rr     	lda     _score0
0004A4r 1  A0 1E        	ldy     #$1E
0004A6r 1  20 rr rr     	jsr     incaxy
0004A9r 1  A2 00        	ldx     #$00
0004ABr 1  85 rr        	sta     _temp2
0004ADr 1               ;
0004ADr 1               ; vram_put(temp1);
0004ADr 1               ;
0004ADr 1  A5 rr        	lda     _temp1
0004AFr 1  20 rr rr     	jsr     _vram_put
0004B2r 1               ;
0004B2r 1               ; vram_put(temp2);
0004B2r 1               ;
0004B2r 1  A5 rr        	lda     _temp2
0004B4r 1  20 rr rr     	jsr     _vram_put
0004B7r 1               ;
0004B7r 1               ; ppu_on_all();
0004B7r 1               ;
0004B7r 1  20 rr rr     	jsr     _ppu_on_all
0004BAr 1               ;
0004BAr 1               ; if(state==0){
0004BAr 1               ;
0004BAr 1  A2 00        L002B:	ldx     #$00
0004BCr 1  A5 rr        	lda     _state
0004BEr 1  C9 00        	cmp     #$00
0004C0r 1  20 rr rr     	jsr     booleq
0004C3r 1  D0 03 4C rr  	jeq     L002D
0004C7r 1  rr           
0004C8r 1               ;
0004C8r 1               ; music_play(0);
0004C8r 1               ;
0004C8r 1  A9 00        	lda     #$00
0004CAr 1  20 rr rr     	jsr     _music_play
0004CDr 1               ;
0004CDr 1               ; state=2;
0004CDr 1               ;
0004CDr 1  A2 00        	ldx     #$00
0004CFr 1  A9 02        	lda     #$02
0004D1r 1  85 rr        	sta     _state
0004D3r 1               ;
0004D3r 1               ; timer=60;
0004D3r 1               ;
0004D3r 1  A2 00        	ldx     #$00
0004D5r 1  A9 3C        	lda     #$3C
0004D7r 1  8D rr rr     	sta     _timer
0004DAr 1               ;
0004DAr 1               ; ppu_off();
0004DAr 1               ;
0004DAr 1  20 rr rr     	jsr     _ppu_off
0004DDr 1               ;
0004DDr 1               ; vram_adr(NAMETABLE_A);
0004DDr 1               ;
0004DDr 1  A2 20        	ldx     #$20
0004DFr 1  A9 00        	lda     #$00
0004E1r 1  20 rr rr     	jsr     _vram_adr
0004E4r 1               ;
0004E4r 1               ; vram_unrle(sands);
0004E4r 1               ;
0004E4r 1  A9 rr        	lda     #<(_sands)
0004E6r 1  A2 rr        	ldx     #>(_sands)
0004E8r 1  20 rr rr     	jsr     _vram_unrle
0004EBr 1               ;
0004EBr 1               ; pal_col(0x3F00,0x22);
0004EBr 1               ;
0004EBr 1  A9 00        	lda     #$00
0004EDr 1  20 rr rr     	jsr     pusha
0004F0r 1  A9 22        	lda     #$22
0004F2r 1  20 rr rr     	jsr     _pal_col
0004F5r 1               ;
0004F5r 1               ; pal_col(0x3F10,0x22);
0004F5r 1               ;
0004F5r 1  A9 10        	lda     #$10
0004F7r 1  20 rr rr     	jsr     pusha
0004FAr 1  A9 22        	lda     #$22
0004FCr 1  20 rr rr     	jsr     _pal_col
0004FFr 1               ;
0004FFr 1               ; ppu_on_all();
0004FFr 1               ;
0004FFr 1  20 rr rr     	jsr     _ppu_on_all
000502r 1               ;
000502r 1               ; while (1){
000502r 1               ;
000502r 1  4C rr rr     L002D:	jmp     L0002
000505r 1               ;
000505r 1               ; }
000505r 1               ;
000505r 1  60           	rts
000506r 1               
000506r 1               .endproc
000506r 1               
000506r 1               
