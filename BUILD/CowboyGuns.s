;
; File generated by cc65 v 2.19 - Git 216bb22
;
	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_rand
	.import		_pal_all
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_sfx_play
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_unrle
	.import		_set_vram_buffer
	.import		_set_scroll_x
	.import		_zap_shoot
	.import		_zap_read
	.export		_sands
	.export		_title
	.export		_boxes_0_data
	.export		_boxes_1_data
	.export		_boxes_list
	.export		_enemy_0_data
	.export		_enemy_1_data
	.export		_enemy_list
	.export		_pad2_zapper
	.export		_zapper_ready
	.export		_hit_detected
	.export		_temp1
	.export		_temp2
	.export		_state
	.export		_scroll_x
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_type
	.export		_enemy_frame
	.export		_health
	.export		_enemy_up_speed
	.export		_timer
	.export		_floating_down
	.export		_score0
	.export		_score1
	.export		_pal
	.export		_draw_title_box
	.export		_draw_enemy_box
	.export		_draw_enemy
	.export		_main

.segment	"DATA"

_health:
	.byte	$0A
_enemy_up_speed:
	.byte	$0A
_timer:
	.byte	$00
_floating_down:
	.byte	$00
_score0:
	.byte	$00
_score1:
	.byte	$00

.segment	"RODATA"

_sands:
	.byte	$03
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$30
	.byte	$01
	.byte	$01
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$30
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$30
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$01
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$32
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$30
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$30
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$32
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$33
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$32
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$30
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$31
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$32
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$33
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$33
	.byte	$00
	.byte	$03
	.byte	$16
	.byte	$32
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$33
	.byte	$00
	.byte	$03
	.byte	$FE
	.byte	$00
	.byte	$03
	.byte	$FE
	.byte	$00
	.byte	$03
	.byte	$83
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$03
	.byte	$5F
	.byte	$AA
	.byte	$22
	.byte	$A8
	.byte	$AA
	.byte	$20
	.byte	$80
	.byte	$AA
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$02
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$03
	.byte	$1F
	.byte	$50
	.byte	$03
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$06
	.byte	$05
	.byte	$03
	.byte	$00
_title:
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$0B
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$17
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$17
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$16
	.byte	$0B
	.byte	$12
	.byte	$12
	.byte	$17
	.byte	$00
	.byte	$03
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$07
	.byte	$17
	.byte	$0B
	.byte	$0C
	.byte	$16
	.byte	$00
	.byte	$03
	.byte	$0B
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$00
	.byte	$03
	.byte	$0E
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$00
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$00
	.byte	$03
	.byte	$0B
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$0F
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$12
	.byte	$01
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$03
	.byte	$14
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$00
	.byte	$03
	.byte	$2D
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$11
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$11
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$11
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$12
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$6A
	.byte	$00
	.byte	$03
	.byte	$00
_boxes_0_data:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$01
	.byte	$00
	.byte	$80
_boxes_1_data:
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$80
_boxes_list:
	.addr	_boxes_0_data
	.addr	_boxes_1_data
_enemy_0_data:
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$05
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$18
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$09
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$0A
	.byte	$01
	.byte	$18
	.byte	$10
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$0C
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$0D
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$0E
	.byte	$01
	.byte	$18
	.byte	$18
	.byte	$0F
	.byte	$01
	.byte	$80
_enemy_1_data:
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$05
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$18
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$09
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$0A
	.byte	$01
	.byte	$18
	.byte	$10
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$12
	.byte	$01
	.byte	$80
_enemy_list:
	.addr	_enemy_0_data
	.addr	_enemy_0_data
	.addr	_enemy_0_data
	.addr	_enemy_0_data
	.addr	_enemy_0_data
	.addr	_enemy_0_data
	.addr	_enemy_1_data
	.addr	_enemy_1_data
	.addr	_enemy_1_data
	.addr	_enemy_1_data
	.addr	_enemy_1_data
	.addr	_enemy_1_data
_pal:
	.byte	$0F
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$0F
	.byte	$0F
	.byte	$37
	.byte	$10
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F

.segment	"BSS"

.segment	"ZEROPAGE"
_pad2_zapper:
	.res	1,$00
_zapper_ready:
	.res	1,$00
_hit_detected:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_state:
	.res	1,$00
_scroll_x:
	.res	1,$00
_enemy_x:
	.res	1,$00
_enemy_y:
	.res	1,$00
_enemy_type:
	.res	1,$00
_enemy_frame:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_title_box (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_title_box: near

.segment	"CODE"

;
; oam_meta_spr(110,58,boxes_list[0]);
;
	lda     #$6E
	jsr     pusha
	lda     #$3A
	jsr     pusha
	lda     _boxes_list
	ldx     _boxes_list+1
	jsr     _oam_meta_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_enemy_box (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_enemy_box: near

.segment	"CODE"

;
; oam_meta_spr(enemy_x,enemy_y,boxes_list[1]);
;
	lda     _enemy_x
	jsr     pusha
	lda     _enemy_y
	jsr     pusha
	lda     _boxes_list+2
	ldx     _boxes_list+2+1
	jsr     _oam_meta_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_enemy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_enemy: near

.segment	"CODE"

;
; oam_meta_spr(enemy_x,enemy_y,enemy_list[enemy_frame]);
;
	lda     _enemy_x
	jsr     pusha
	lda     _enemy_y
	jsr     pusha
	ldx     #$00
	lda     _enemy_frame
	jsr     aslax1
	clc
	adc     #<(_enemy_list)
	tay
	txa
	adc     #>(_enemy_list)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     _oam_meta_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(pal);
;
	lda     #<(_pal)
	ldx     #>(_pal)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	lda     #<(_title)
	ldx     #>(_title)
	jsr     _vram_unrle
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; music_play(1);
;
	lda     #$01
	jsr     _music_play
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (1){
;
	jmp     L0022
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0002:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; zapper_ready = pad2_zapper^1; // XOR last frame, make sure not held down still
;
	ldx     #$00
	lda     _pad2_zapper
	eor     #$01
	ldx     #$00
	sta     _zapper_ready
;
; pad2_zapper = zap_shoot(1); // controller slot 2
;
	lda     #$01
	jsr     _zap_shoot
	sta     _pad2_zapper
;
; if(state==1){
;
	ldx     #$00
	lda     _state
	cmp     #$01
	jsr     booleq
	jeq     L000E
;
; scroll_x+=5;
;
	ldx     #$00
	lda     #$05
	clc
	adc     _scroll_x
	sta     _scroll_x
;
; draw_enemy();
;
	jsr     _draw_enemy
;
; if(enemy_frame==11){
;
	ldx     #$00
	lda     _enemy_frame
	cmp     #$0B
	jsr     booleq
	jeq     L0006
;
; enemy_frame=0;
;
	ldx     #$00
	lda     #$00
	sta     _enemy_frame
;
; }else
;
	jmp     L0007
;
; enemy_frame++;
;
L0006:	ldx     #$00
	lda     _enemy_frame
	inc     _enemy_frame
;
; if(enemy_type==0){
;
L0007:	ldx     #$00
	lda     _enemy_type
	cmp     #$00
	jsr     booleq
	jeq     L0008
;
; enemy_x++;
;
	ldx     #$00
	lda     _enemy_x
	inc     _enemy_x
;
; enemy_y=190;
;
	ldx     #$00
	lda     #$BE
	sta     _enemy_y
;
; if(enemy_type==1){
;
L0008:	ldx     #$00
	lda     _enemy_type
	cmp     #$01
	jsr     booleq
	jeq     L0009
;
; enemy_x+=3;
;
	ldx     #$00
	lda     #$03
	clc
	adc     _enemy_x
	sta     _enemy_x
;
; enemy_y=190;
;
	ldx     #$00
	lda     #$BE
	sta     _enemy_y
;
; if(enemy_type==2){
;
L0009:	ldx     #$00
	lda     _enemy_type
	cmp     #$02
	jsr     booleq
	jeq     L000E
;
; enemy_x++;
;
	ldx     #$00
	lda     _enemy_x
	inc     _enemy_x
;
; if(floating_down==0){
;
	ldx     #$00
	lda     _floating_down
	cmp     #$00
	jsr     booleq
	jeq     L000B
;
; enemy_y-=3;
;
	ldx     #$00
	lda     _enemy_y
	sec
	sbc     #$03
	sta     _enemy_y
;
; if(enemy_y<100)
;
	ldx     #$00
	lda     _enemy_y
	cmp     #$64
	jsr     boolult
	jeq     L000C
;
; floating_down=1;
;
	ldx     #$00
	lda     #$01
	sta     _floating_down
;
; }else{
;
L000C:	jmp     L000E
;
; enemy_y+=3;
;
L000B:	ldx     #$00
	lda     #$03
	clc
	adc     _enemy_y
	sta     _enemy_y
;
; if(enemy_y>190)
;
	ldx     #$00
	lda     _enemy_y
	cmp     #$BF
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L000E
;
; floating_down=0;
;
	ldx     #$00
	lda     #$00
	sta     _floating_down
;
; if(state==2){
;
L000E:	ldx     #$00
	lda     _state
	cmp     #$02
	jsr     booleq
	jeq     L0014
;
; if(timer==60){
;
	ldx     #$00
	lda     _timer
	cmp     #$3C
	jsr     booleq
	jeq     L0010
;
; scroll_x=0;
;
	ldx     #$00
	lda     #$00
	sta     _scroll_x
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(0x210C);
;
	ldx     #$21
	lda     #$0C
	jsr     _vram_adr
;
; vram_put(0x15);
;
	lda     #$15
	jsr     _vram_put
;
; vram_put(0x08);
;
	lda     #$08
	jsr     _vram_put
;
; vram_put(0x04);
;
	lda     #$04
	jsr     _vram_put
;
; vram_put(0x07);
;
	lda     #$07
	jsr     _vram_put
;
; vram_put(0x1C);
;
	lda     #$1C
	jsr     _vram_put
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; timer--;
;
L0010:	ldx     #$00
	lda     _timer
	dec     _timer
;
; if(timer==0){
;
	ldx     #$00
	lda     _timer
	cmp     #$00
	jsr     booleq
	jeq     L0014
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(sands);
;
	lda     #<(_sands)
	ldx     #>(_sands)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; enemy_x=0;
;
	ldx     #$00
	lda     #$00
	sta     _enemy_x
;
; enemy_y=190;
;
	ldx     #$00
	lda     #$BE
	sta     _enemy_y
;
; state=1;
;
	ldx     #$00
	lda     #$01
	sta     _state
;
; health=10;
;
	ldx     #$00
	lda     #$0A
	sta     _health
;
; enemy_type=rand() % 3 + 0;
;
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     tosmodax
	ldx     #$00
	sta     _enemy_type
;
; if(enemy_type==0){
;
	ldx     #$00
	lda     _enemy_type
	cmp     #$00
	jsr     booleq
	jeq     L0012
;
; pal_col(0x3F14,0x0f);
;
	lda     #$14
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(0x3F15,0x0f);
;
	lda     #$15
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(0x3F16,0x27);
;
	lda     #$16
	jsr     pusha
	lda     #$27
	jsr     _pal_col
;
; pal_col(0x3F17,0x37);
;
	lda     #$17
	jsr     pusha
	lda     #$37
	jsr     _pal_col
;
; if(enemy_type==1){
;
L0012:	ldx     #$00
	lda     _enemy_type
	cmp     #$01
	jsr     booleq
	jeq     L0013
;
; pal_col(0x3F14,0x22);
;
	lda     #$14
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(0x3F15,0x01);
;
	lda     #$15
	jsr     pusha
	lda     #$01
	jsr     _pal_col
;
; pal_col(0x3F16,0x21);
;
	lda     #$16
	jsr     pusha
	lda     #$21
	jsr     _pal_col
;
; pal_col(0x3F17,0x31);
;
	lda     #$17
	jsr     pusha
	lda     #$31
	jsr     _pal_col
;
; if(enemy_type==2){
;
L0013:	ldx     #$00
	lda     _enemy_type
	cmp     #$02
	jsr     booleq
	jeq     L0014
;
; floating_down=0;
;
	ldx     #$00
	lda     #$00
	sta     _floating_down
;
; pal_col(0x3F14,0x09);
;
	lda     #$14
	jsr     pusha
	lda     #$09
	jsr     _pal_col
;
; pal_col(0x3F15,0x19);
;
	lda     #$15
	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; pal_col(0x3F16,0x29);
;
	lda     #$16
	jsr     pusha
	lda     #$29
	jsr     _pal_col
;
; pal_col(0x3F17,0x39);
;
	lda     #$17
	jsr     pusha
	lda     #$39
	jsr     _pal_col
;
; set_scroll_x(scroll_x);
;
L0014:	ldx     #$00
	lda     _scroll_x
	jsr     _set_scroll_x
;
; if((pad2_zapper)&&(zapper_ready)){
;
	lda     _pad2_zapper
	jeq     L0016
	lda     _zapper_ready
	jne     L0017
L0016:	ldx     #$00
	lda     #$00
	jeq     L0018
L0017:	ldx     #$00
	lda     #$01
L0018:	jeq     L0022
;
; if((state!=2)){
;
	ldx     #$00
	lda     _state
	cmp     #$02
	jsr     boolne
	jeq     L001C
;
; sfx_play(0,0);
;
	lda     #$00
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_col(0x3F00,0x0F);
;
	lda     #$00
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(0x3F10,0x0F);
;
	lda     #$10
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; oam_clear();
;
	jsr     _oam_clear
;
; if(state==0)
;
	ldx     #$00
	lda     _state
	cmp     #$00
	jsr     booleq
	jeq     L001A
;
; draw_title_box();
;
	jsr     _draw_title_box
;
; if(state==1){
;
L001A:	ldx     #$00
	lda     _state
	cmp     #$01
	jsr     booleq
	jeq     L001B
;
; draw_enemy_box();
;
	jsr     _draw_enemy_box
;
; ppu_mask(0x16); // BG off, won't happen till NEXT frame
;
L001B:	lda     #$16
	jsr     _ppu_mask
;
; ppu_wait_nmi(); // wait till the top of the next frame
;
	jsr     _ppu_wait_nmi
;
; oam_clear(); // clear the NEXT frame
;
	jsr     _oam_clear
;
; if(state==1){
;
	ldx     #$00
	lda     _state
	cmp     #$01
	jsr     booleq
	jeq     L001C
;
; draw_enemy();
;
	jsr     _draw_enemy
;
; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
;
L001C:	lda     #$1E
	jsr     _ppu_mask
;
; if(state==1){
;
	ldx     #$00
	lda     _state
	cmp     #$01
	jsr     booleq
	jeq     L001D
;
; pal_col(0x3F00,0x22);
;
	lda     #$00
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(0x3F10,0x22);
;
	lda     #$10
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; hit_detected = zap_read(1); // look for light in zapper, port 2
;
L001D:	lda     #$01
	jsr     _zap_read
	sta     _hit_detected
;
; if(hit_detected){
;
	lda     _hit_detected
	jeq     L0022
;
; if(state==1){
;
	ldx     #$00
	lda     _state
	cmp     #$01
	jsr     booleq
	jeq     L0020
;
; health--;
;
	ldx     #$00
	lda     _health
	dec     _health
;
; if((health==0)){
;
	ldx     #$00
	lda     _health
	cmp     #$00
	jsr     booleq
	jeq     L0020
;
; state=2;
;
	ldx     #$00
	lda     #$02
	sta     _state
;
; timer=60;
;
	ldx     #$00
	lda     #$3C
	sta     _timer
;
; score0++;
;
	ldx     #$00
	lda     _score0
	inc     _score0
;
; if(score0==10){
;
	ldx     #$00
	lda     _score0
	cmp     #$0A
	jsr     booleq
	jeq     L0021
;
; score0=0;
;
	ldx     #$00
	lda     #$00
	sta     _score0
;
; score1++;
;
	ldx     #$00
	lda     _score1
	inc     _score1
;
; ppu_off();
;
L0021:	jsr     _ppu_off
;
; vram_adr(0x20A0);
;
	ldx     #$20
	lda     #$A0
	jsr     _vram_adr
;
; vram_put(0x16);
;
	lda     #$16
	jsr     _vram_put
;
; vram_put(0x06);
;
	lda     #$06
	jsr     _vram_put
;
; vram_put(0x12);
;
	lda     #$12
	jsr     _vram_put
;
; vram_put(0x15);
;
	lda     #$15
	jsr     _vram_put
;
; vram_put(0x08);
;
	lda     #$08
	jsr     _vram_put
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; temp1=score1+0x1E;
;
	ldx     #$00
	lda     _score1
	ldy     #$1E
	jsr     incaxy
	ldx     #$00
	sta     _temp1
;
; temp2=score0+0x1E;
;
	ldx     #$00
	lda     _score0
	ldy     #$1E
	jsr     incaxy
	ldx     #$00
	sta     _temp2
;
; vram_put(temp1);
;
	lda     _temp1
	jsr     _vram_put
;
; vram_put(temp2);
;
	lda     _temp2
	jsr     _vram_put
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if(state==0){
;
L0020:	ldx     #$00
	lda     _state
	cmp     #$00
	jsr     booleq
	jeq     L0022
;
; music_play(0);
;
	lda     #$00
	jsr     _music_play
;
; state=2;
;
	ldx     #$00
	lda     #$02
	sta     _state
;
; timer=60;
;
	ldx     #$00
	lda     #$3C
	sta     _timer
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(sands);
;
	lda     #<(_sands)
	ldx     #>(_sands)
	jsr     _vram_unrle
;
; pal_col(0x3F00,0x22);
;
	lda     #$00
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(0x3F10,0x22);
;
	lda     #$10
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (1){
;
L0022:	jmp     L0002
;
; }
;
	rts

.endproc

